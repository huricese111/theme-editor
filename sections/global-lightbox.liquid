<!-- Lightbox overlay -->
  <div class="lightbox-overlay" id="lightbox-overlay-{{ section.id }}" style="display: none;">
    <div class="lightbox-container">
      <div class="lightbox-content">
        
        <div class="lightbox-caption"></div>
      </div>
      <button class="lightbox-close" aria-label="Close lightbox">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="18" y1="6" x2="6" y2="18"></line>
          <line x1="6" y1="6" x2="18" y2="18"></line>
        </svg>
      </button>
      <button class="lightbox-nav prev" aria-label="Previous image">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="15 18 9 12 15 6"></polyline>
        </svg>
      </button>
      <button class="lightbox-nav next" aria-label="Next image">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <polyline points="9 18 15 12 9 6"></polyline>
        </svg>
      </button>
    </div>
  </div>

  <style>/* LIGHTBOX STYLES - 确保在全局层 */
.lightbox-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.92);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2147483647;
  opacity: 0;
  transition: opacity 0.3s ease;
  backdrop-filter: blur(8px);
}

.lightbox-overlay.active {
  opacity: 1;
}

.lightbox-container {
  position: relative;
  max-width: 90%;
  max-height: 90%;
  width: auto;
  height: auto;
}

.lightbox-content {
  position: relative;
}

.lightbox-image {
  max-width: 100%;
  max-height: 85vh;
  display: block;
  margin: 0 auto;
  box-shadow: 0 10px 50px rgba(0, 0, 0, 0.5);
  animation: lightboxFadeIn 0.4s ease;
}

.lightbox-caption {
  color: #fff;
  text-align: center;
  margin-top: 15px;
  font-size: 18px;
  padding: 0 20px;
  max-width: 80%;
  margin: 15px auto 0;
}

.lightbox-close {
  position: absolute;
  top: 30px;
  right: 30px;
  background: none;
  border: none;
  color: white;
  font-size: 30px;
  cursor: pointer;
  padding: 10px;
  opacity: 0.8;
  transition: opacity 0.3s;
  z-index: 2147483649;
}

.lightbox-close:hover {
  opacity: 1;
}

.lightbox-close svg {
  width: 30px;
  height: 30px;
  stroke: white;
}

.lightbox-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: rgba(0, 0, 0, 0.5);
  border: none;
  color: white;
  font-size: 24px;
  width: 50px;
  height: 50px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  opacity: 0.7;
  transition: opacity 0.3s;
  z-index: 2147483648;
}

.lightbox-nav:hover {
  opacity: 1;
  background: rgba(0, 0, 0, 0.8);
}

.lightbox-nav.prev {
  left: 20px;
}

.lightbox-nav.next {
  right: 20px;
}

.lightbox-nav svg {
  width: 24px;
  height: 24px;
  stroke: white;
}

@keyframes lightboxFadeIn {
  from { opacity: 0; transform: scale(0.95); }
  to { opacity: 1; transform: scale(1); }
}

/* 移动端优化 */
@media (max-width: 768px) {
  .lightbox-close {
    top: 20px;
    right: 20px;
  }
  
  .lightbox-nav {
    width: 40px;
    height: 40px;
  }
  
  .lightbox-nav.prev {
    left: 10px;
  }
  
  .lightbox-nav.next {
    right: 10px;
  }
  
  .lightbox-caption {
    font-size: 16px;
  }
}
  </style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 选择所有lightbox触发元素
    const imageWrappers = document.querySelectorAll('.image-wrapper');
    const lightboxOverlay = document.getElementById('lightbox-overlay');
    const lightboxImageContainer = lightboxOverlay.querySelector('.lightbox-image-container');
    const lightboxCaption = lightboxOverlay.querySelector('.lightbox-caption');
    const lightboxClose = lightboxOverlay.querySelector('.lightbox-close');
    const lightboxPrev = lightboxOverlay.querySelector('.lightbox-nav.prev');
    const lightboxNext = lightboxOverlay.querySelector('.lightbox-nav.next');
    
    // 收集所有lightbox图片数据
    const lightboxData = [];
    
    imageWrappers.forEach(wrapper => {
      const image = wrapper.querySelector('.carousel-image');
      if (image) {
        lightboxData.push({
          src: image.src.replace('_1200x.', '.'), // 获取原图
          alt: image.alt,
          caption: wrapper.dataset.lightboxCaption || ''
        });
        
        // 添加点击事件
        wrapper.addEventListener('click', function(e) {
          // 跳过链接点击
          if (e.target.tagName === 'A') return;
          
          // 在Shopify编辑器中禁用lightbox
          if (typeof Shopify !== 'undefined' && Shopify.designMode) return;
          
          e.preventDefault();
          const index = Array.from(imageWrappers).indexOf(wrapper);
          openLightbox(index);
        });
      }
    });
    
    // 设置lightbox事件
    lightboxClose.addEventListener('click', closeLightbox);
    lightboxOverlay.addEventListener('click', function(e) {
      if (e.target === lightboxOverlay) closeLightbox();
    });
    
    let currentIndex = 0;
    
    // 打开lightbox
    function openLightbox(index) {
      currentIndex = index;
      const item = lightboxData[currentIndex];
      
      // 创建图片元素
      const img = document.createElement('img');
      img.src = item.src;
      img.alt = item.alt;
      img.classList.add('lightbox-image');
      
      // 更新内容
      lightboxImageContainer.innerHTML = '';
      lightboxImageContainer.appendChild(img);
      lightboxCaption.textContent = item.caption;
      
      // 显示lightbox（在body级别）
      document.body.style.overflow = 'hidden';
      lightboxOverlay.style.display = 'flex';
      setTimeout(() => {
        lightboxOverlay.classList.add('active');
      }, 10);
      
      // 添加导航箭头（如果有多个图片）
      if (lightboxData.length > 1) {
        lightboxPrev.style.display = 'flex';
        lightboxNext.style.display = 'flex';
        
        lightboxPrev.addEventListener('click', () => navigate(-1));
        lightboxNext.addEventListener('click', () => navigate(1));
      } else {
        lightboxPrev.style.display = 'none';
        lightboxNext.style.display = 'none';
      }
      
      // 添加键盘事件
      document.addEventListener('keydown', handleKeyDown);
    }
    
    // 导航函数
    function navigate(direction) {
      currentIndex = (currentIndex + direction + lightboxData.length) % lightboxData.length;
      openLightbox(currentIndex);
    }
    
    // 关闭lightbox
    function closeLightbox() {
      lightboxOverlay.classList.remove('active');
      setTimeout(() => {
        lightboxOverlay.style.display = 'none';
        document.body.style.overflow = '';
      }, 300);
      
      // 移除事件监听
      document.removeEventListener('keydown', handleKeyDown);
    }
    
    // 键盘导航
    function handleKeyDown(e) {
      if (e.key === 'Escape') closeLightbox();
      if (e.key === 'ArrowLeft') navigate(-1);
      if (e.key === 'ArrowRight') navigate(1);
    }
  });
</script>