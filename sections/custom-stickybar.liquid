{% schema %}
  {
    "name": "Csutom stickybar",
    "settings": [],
     "presets": [
    {
      "name": "Csutom stickybar",
      "category": "Custom"
    }
  ]
  }
{% endschema %}

<style>
    html {
        scroll-behavior: smooth;
    }

    .stickyNavigation {
        display: flex;
        align-items: center;
        justify-content: space-between;
        background-color: rgb(255, 255, 255);
        padding: 1em 2em;
        width: 100%;
        box-shadow: rgba(91, 104, 113, 0.1) 0px 6px 8px;
        transform: translateY(0px);
        transition: box-shadow 0.2s, transform 0.2s;
        z-index: 100 !important;
    }

    .stickyNavigationleft {
        display: flex;
        align-items: center;
        gap: 4rem;
    }

    .stickyNavigation-title {
        font-size: 24px;
        font-weight: bold;
    }

    .stickyNavigation-links {
        display: flex;
        gap: 20px;
    }

    .stickyNavigation-links a {
        text-decoration: none;
        color: #333;
    }

    .button.button--large {
    white-space: nowrap !important;
}

  .highlightitems {
    font-weight: bold;
    color: #2b7dde !important;
}

    @media (max-width: 768px) {
        .stickyNavigation-links {
            display: none;
        }

        .stickyNavigation {
            display: none;
        }

        .stickyNavigation-title {
            font-size: 18px;
            line-height: 20px;
        }
    }
</style>

<div class="stickyNavigation" id="stickyNavigation">
    <div class="stickyNavigationleft">
        <div class="stickyNavigation-title">{{ product.title }}</div>
        <div class="stickyNavigation-links">
            <a href="#highlights" class="nav-link">{{ 'ebike.highlights' | t }}</a>
            <a href="#specification" class="nav-link">{{ 'ebike.specification' | t }}</a>
            <a href="#frame_geometry" class="nav-link">{{ 'ebike.frame_geometry' | t }}</a>
            <a href="#appblock" class="nav-link">{{ 'ebike.review' | t }}</a>
        </div>
    </div>
    <div id="buttonContainer" class="buttonContainer"></div>
</div>

<script>
 document.addEventListener('DOMContentLoaded', function() {
    const links = document.querySelectorAll('.nav-link');

    // 创建一个 Intersection Observer
    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            const id = entry.target.id;
            const link = document.querySelector(`a[href="#${id}"]`);

            if (entry.isIntersecting) {
                links.forEach(link => link.classList.remove('highlightitems'));
                if (link) {
                    link.classList.add('highlightitems');
                }
            }
        });
    }, {
        threshold: 0.1 
    });

    links.forEach(link => {
        const targetId = link.getAttribute('href').substring(1); // 去掉 #
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
            observer.observe(targetElement);
        }
    });

    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const targetId = this.getAttribute('href');
            const targetElement = document.querySelector(targetId);
            targetElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
        });
    });
});

</script>