{% schema %}
{
  "name": "Notify me",
  "settings": [],
  "presets": [
    {
      "name": "Notify me",
      "category": "Custom"
    }
  ]
}
{% endschema %}

<style>
  /* Notify Me Button Styles */
  .notify-me-button {
    display: none;
    width: 100%;
    padding: 14px;
    background: #000;
    color: #fff;
    border: none;
    border-radius: 3px;
    font-size: 14px;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    cursor: pointer;
    transition: background 0.3s;
    margin-top: 15px;
  }
  
  .notify-me-button:hover {
    background: #333;
  }
  
  /* Notify Me Modal Styles */
  .notify-me-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10000;
  }
  
  .notify-me-container {
    background: #fff;
    border-radius: 5px;
    max-width: 500px;
    width: 90%;
    box-shadow: 0 10px 40px rgba(0, 0, 0, 0.3);
    overflow: hidden;
  }
  
  .notify-me-header {
    padding: 20px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .notify-me-title {
    margin: 0;
    font-size: 20px;
    font-weight: 600;
  }
  
  .notify-me-close {
    font-size: 28px;
    cursor: pointer;
    line-height: 1;
  }
  
  .notify-me-content {
    padding: 20px;
  }
  
  .notify-me-variant {
    margin: 15px 0;
    padding: 15px;
    background: #f9f9f9;
    border-radius: 4px;
    font-size: 14px;
  }
  
  .notify-me-form .input-wrapper {
    margin-bottom: 15px;
  }
  
  .notify-me-form input[type="email"] {
    width: 100%;
    padding: 12px 15px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
  }
  
  .notify-me-submit {
    width: 100%;
    padding: 14px;
    background: #000;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 600;
    font-size: 14px;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    transition: background 0.3s;
  }
  
  .notify-me-submit:hover {
    background: #333;
  }
  
  .notify-me-success {
    padding: 20px;
    text-align: center;
    background: #f0fff0;
    border: 1px solid #4CAF50;
    border-radius: 4px;
    margin-top: 15px;
    display: none;
  }
</style>

<!-- Notify Me Button -->
<button type="button" class="notify-me-button">
  Notify me when available
</button>

<!-- Notify Me Modal -->
<div class="notify-me-modal" id="notify-me-popup">
  <div class="notify-me-container">
    <div class="notify-me-header">
      <h3 class="notify-me-title">Notify me when available</h3>
      <span class="notify-me-close">&times;</span>
    </div>
    
    <div class="notify-me-content">
      <p>Enter your email to be notified when {{ product.title }} is back in stock</p>
      
      <div class="notify-me-variant">
        <strong>Selected variant:</strong>
        <span id="notify-selected-variant">{{ current_variant.title }}</span>
      </div>
      
      <form class="notify-me-form" id="notify-me-form">
        <input type="hidden" name="contact[product]" value="{{ product.title | escape }}">
        <input type="hidden" name="contact[product_url]" value="{{ shop.url }}{{ product.url }}">
        <input type="hidden" id="notify-variant-id" name="contact[variant_id]" value="{{ current_variant.id }}">
        <input type="hidden" id="notify-variant-title" name="contact[variant_title]" value="{{ current_variant.title }}">
        
        <div class="input-wrapper">
          <input
            type="email"
            id="notify-email"
            name="contact[email]"
            placeholder="Your email address"
            required
          >
        </div>
        
        <button type="submit" class="notify-me-submit">
          Notify me
        </button>
      </form>
      
      <div class="notify-me-success">
        You'll be notified when this item is back in stock!
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get DOM elements
  const notifyButton = document.querySelector('.notify-me-button');
  const modal = document.getElementById('notify-me-popup');
  const closeBtn = modal.querySelector('.notify-me-close');
  const notifyForm = document.getElementById('notify-me-form');
  const successMessage = document.querySelector('.notify-me-success');
  const variantDisplay = document.getElementById('notify-selected-variant');
  const variantIdInput = document.getElementById('notify-variant-id');
  const variantTitleInput = document.getElementById('notify-variant-title');
  
  // Get add to cart button
  const addToCartButton = document.querySelector('.product-form__submit');
  
  // Show modal function
  function showModal() {
    updateSelectedVariant();
    modal.style.display = 'flex';
    document.body.style.overflow = 'hidden';
  }
  
  // Close modal function
  function closeModal() {
    modal.style.display = 'none';
    document.body.style.overflow = 'auto';
  }
  
  // Update selected variant function
  function updateSelectedVariant() {
    // Get current variant ID
    const variantId = document.querySelector('[name="id"]').value;
    
    // Find the selected variant option
    const variantOption = document.querySelector(`.product-form__input input[name="id"][value="${variantId}"]`);
    
    if (variantOption) {
      const variantTitle = variantOption.dataset.title || variantOption.parentElement.textContent.trim();
      variantDisplay.textContent = variantTitle;
      variantIdInput.value = variantId;
      variantTitleInput.value = variantTitle;
    }
  }
  
  // Check variant availability
  function checkVariantAvailability() {
    if (!addToCartButton) return;
    
    // If add to cart button is disabled or has 'disabled' class
    if (addToCartButton.disabled || addToCartButton.classList.contains('disabled')) {
      notifyButton.style.display = 'block';
    } else {
      notifyButton.style.display = 'none';
    }
  }
  
  // Initial check
  checkVariantAvailability();
  
  // Variant change handler
  function handleVariantChange() {
    checkVariantAvailability();
    updateSelectedVariant();
  }
  
  // Listen for variant changes
  document.addEventListener('variantChange', handleVariantChange);
  
  // Listen for variant selection changes
  document.querySelectorAll('.product-form__input input').forEach(input => {
    input.addEventListener('change', handleVariantChange);
  });
  
  // Notify button click
  notifyButton.addEventListener('click', showModal);
  
  // Close button click
  closeBtn.addEventListener('click', closeModal);
  
  // Click outside modal
  modal.addEventListener('click', function(e) {
    if (e.target === modal) {
      closeModal();
    }
  });
  
  // Form submission
  notifyForm.addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const submitButton = this.querySelector('button[type="submit"]');
    const originalBtnText = submitButton.textContent;
    
    // Update button state
    submitButton.disabled = true;
    submitButton.textContent = 'Sending...';
    
    try {
      const formData = new FormData(this);
      formData.append('form_type', 'contact');
      
      // Send request to Shopify contact form
      const response = await fetch('/contact', {
        method: 'POST',
        body: formData,
        headers: {
          'X-Requested-With': 'XMLHttpRequest'
        }
      });
      
      if (response.ok) {
        // Show success message
        notifyForm.style.display = 'none';
        successMessage.style.display = 'block';
        
        // Reset form after 3 seconds
        setTimeout(() => {
          closeModal();
          notifyForm.reset();
          notifyForm.style.display = 'block';
          successMessage.style.display = 'none';
        }, 3000);
      } else {
        // Show error message
        alert('An error occurred. Please try again.');
      }
    } catch (error) {
      console.error('Error:', error);
      alert('Network error. Please try again.');
    } finally {
      submitButton.disabled = false;
      submitButton.textContent = originalBtnText;
    }
  });
});
</script>