{% schema %}
{
  "name": "Custom Stickybar",
  "settings": [],
  "blocks": [
    {
      "type": "nav_link",
      "name": "Navigation Link",
      "settings": [
        {
          "type": "text",
          "id": "anchor_id",
          "label": "Anchor ID",
          "info": "Section ID to scroll to (without #)",
          "default": "highlights"
        },
        {
          "type": "text",
          "id": "text_en",
          "label": "Text (English)",
          "default": "Highlights"
        },
        {
          "type": "text",
          "id": "text_de",
          "label": "Text (German)",
          "default": "Highlights"
        },
        {
          "type": "text",
          "id": "text_fr",
          "label": "Text (French)",
          "default": "Points forts"
        },
        {
          "type": "text",
          "id": "text_fi",
          "label": "Text (Finnish)",
          "default": "Kohokohdat"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Custom Stickybar",
      "category": "Custom",
      "blocks": [
        {
          "type": "nav_link",
          "settings": {
            "anchor_id": "highlights",
            "text_en": "Highlights",
            "text_de": "Highlights",
            "text_fr": "Points forts",
            "text_fi": "Kohokohdat"
          }
        },
        {
          "type": "nav_link",
          "settings": {
            "anchor_id": "specification",
            "text_en": "Specification",
            "text_de": "Spezifikation",
            "text_fr": "Spécification",
            "text_fi": "Tekniset tiedot"
          }
        },
        {
          "type": "nav_link",
          "settings": {
            "anchor_id": "frame_geometry",
            "text_en": "Frame Geometry",
            "text_de": "Rahmengröße",
            "text_fr": "Géométrie du cadre",
            "text_fi": "Rungon geometria"
          }
        },
        {
          "type": "nav_link",
          "settings": {
            "anchor_id": "appblock",
            "text_en": "Review",
            "text_de": "Bewertungen",
            "text_fr": "Avis",
            "text_fi": "Arvostelut"
          }
        }
      ]
    }
  ]
}
{% endschema %}

<style>
  .sticky-nav {
    --sticky-bar-z-index: 10;
    --sticky-bar-min-height: 60px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background-color: rgb(255, 255, 255);
    padding: 1em 2em;
    width: 100%;
    box-shadow: rgba(91, 104, 113, 0.1) 0px 6px 8px;
    z-index: var(--sticky-bar-z-index);
    min-height: var(--sticky-bar-min-height);
    position: relative;
    top: 0;
    left: 0;
    box-sizing: border-box;
  }

  .sticky-nav--fixed {
    position: fixed;
    top: 0 !important;
    left: 0;
    animation: fadeInDown 0.3s ease;
    z-index: var(--sticky-bar-z-index);
  }

  .overlay-backdrop {
    z-index: 1000;
  }

  @keyframes fadeInDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .sticky-nav-container {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    position: relative;
  }

  .sticky-nav-left {
    display: flex;
    align-items: center;
    flex: 1;
    min-width: 0;
    padding-right: 20px;
  }

  .sticky-nav-title {
    font-size: 22px;
    font-weight: bold;
    white-space: nowrap;
    overflow: visible;
    text-overflow: unset;
    margin-right: 30px;
    flex-shrink: 0;
  }

  .sticky-nav-links {
    display: flex;
    gap: 20px;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    padding-bottom: 2px;
    flex-grow: 1;
    min-width: 0;
  }

  .sticky-nav-links::-webkit-scrollbar {
    display: none;
  }

  .sticky-nav-link {
    text-decoration: none;
    color: #333;
    transition: color 0.3s ease;
    white-space: nowrap;
    font-size: 14px;
    letter-spacing: 0.5px;
    text-transform: uppercase;
    font-weight: 500;
    padding: 4px 0;
    flex-shrink: 0;
  }

  .sticky-nav-highlight {
    font-weight: bold;
    color: #2b7dde !important;
    position: relative;
  }

  .sticky-nav-highlight::after {
    content: '';
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 2px;
    background: #2b7dde;
  }

  .sticky-nav-button-container {
    display: flex;
    align-items: center;
    justify-content: flex-end;
    min-width: 160px;
    flex-shrink: 0;
  }

  .sticky-cart-btn {
    white-space: nowrap;
    transition: all 0.3s ease;
    padding: 10px 20px;
    background-color: #000;
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    font-size: 14px;
    letter-spacing: 0.5px;
  }

  .sticky-cart-btn:disabled {
    background-color: #666;
    cursor: not-allowed;
  }

  @media (max-width: 1280px) {
    .sticky-nav-title {
      max-width: 350px;
    }
  }

  @media (max-width: 1120px) {
    .sticky-nav-title {
      max-width: 250px;
    }
  }

  @media (max-width: 960px) {
    .sticky-nav-title {
      max-width: 180px;
      font-size: 18px;
    }

    .sticky-nav-links {
      gap: 15px;
    }

    .sticky-nav-link {
      font-size: 13px;
    }
  }

  @media (max-width: 890px) {
    .sticky-nav-links {
      display: none;
    }

    .sticky-nav-left {
      padding-right: 0;
      justify-content: space-between;
    }
  }

  @media (max-width: 768px) {
    .sticky-nav {
      display: none;
    }
  }
</style>

<div class="sticky-nav" id="stickyNavBar">
  <div class="sticky-nav-container">
    <div class="sticky-nav-left">
      <div class="sticky-nav-title">{{ product.title }}</div>
      <div class="sticky-nav-links">
        {% for block in section.blocks %}
          {% assign link_text = block.settings.text_en %}
          {% case request.locale.iso_code %}
            {% when 'de' %}
              {% assign link_text = block.settings.text_de %}
            {% when 'fr' %}
              {% assign link_text = block.settings.text_fr %}
            {% when 'fi' %}
              {% assign link_text = block.settings.text_fi %}
          {% endcase %}

          <a
            href="#{{ block.settings.anchor_id }}"
            class="sticky-nav-link"
            data-anchor="{{ block.settings.anchor_id }}"
          >
            {{ link_text }}
          </a>
        {% endfor %}
      </div>
    </div>
    <div class="sticky-nav-button-container" id="stickyNavButtonContainer"></div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    const config = {
      headerSelector: 'header, .header, .announcement-bar, .announcement',
      scrollOffset: 30,
      scrollBehavior: 'smooth',
      highlightClass: 'sticky-nav-highlight',
      cartButtonSelector: '.btn.btn--large.add-to-cart',
      cartButtonTextSelector: '[data-add-to-cart-text]',
      debounceTime: 50,
    };

    const stickyNav = document.getElementById('stickyNavBar');
    const stickyButtonContainer = document.getElementById('stickyNavButtonContainer');
    const stickyNavLinks = document.querySelector('.sticky-nav-links');

    if (!stickyNav) return;

    function fixLightboxZIndex() {
      try {
        const lightboxes = document.querySelectorAll('.lightbox-container');
        lightboxes.forEach((lightbox) => {
          const currentZIndex = parseInt(getComputedStyle(lightbox).zIndex);
          if (currentZIndex <= 950) {
            lightbox.style.zIndex = '1000000';
          }
        });
      } catch (e) {
        console.log('Lightbox z-index adjustment completed');
      }
    }

    function setupZIndexManagement() {
      fixLightboxZIndex();

      document.querySelectorAll('.slide-image').forEach((image) => {
        image.addEventListener('click', function () {
          setTimeout(fixLightboxZIndex, 50);
        });
      });

      const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
          if (mutation.addedNodes) {
            mutation.addedNodes.forEach((node) => {
              if (node.classList && node.classList.contains('lightbox-container')) {
                fixLightboxZIndex();
              }
            });
          }
        });
      });

      observer.observe(document.body, {
        childList: true,
        subtree: true,
      });
    }

    // 3. Debounce函数
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }

    // 4. 计算头部高度
    function calculateHeaderHeight() {
      try {
        let totalHeight = 0;
        const headers = document.querySelectorAll(config.headerSelector);

        headers.forEach((header) => {
          if (header) {
            const styles = window.getComputedStyle(header);
            const margin = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);
            totalHeight += header.offsetHeight + margin;
          }
        });

        return Math.max(totalHeight, 0);
      } catch (e) {
        return 0;
      }
    }

    function setupStickyNav() {
      let lastScrollPosition = 0;
      let headerHeight = calculateHeaderHeight();

      function updateStickyState() {
        try {
          headerHeight = calculateHeaderHeight();
          const scrollY = window.pageYOffset || document.documentElement.scrollTop;

          if (scrollY > headerHeight) {
            stickyNav.classList.add('sticky-nav--fixed');
          } else {
            stickyNav.classList.remove('sticky-nav--fixed');
          }

          lastScrollPosition = scrollY;
        } catch (e) {
          console.error('Sticky bar error:', e);
        }
      }

      const debouncedScrollHandler = debounce(updateStickyState, config.debounceTime);
      const debouncedResizeHandler = debounce(updateStickyState, config.debounceTime);

      window.addEventListener('scroll', debouncedScrollHandler);
      window.addEventListener('resize', debouncedResizeHandler);

      updateStickyState();
    }

    function createButtonMirror() {
      try {
        const originalButton = document.querySelector(config.cartButtonSelector);
        if (!originalButton) {
          stickyButtonContainer.innerHTML = `
          <button class="sticky-cart-btn">Add to cart</button>
        `;
          return;
        }

        const newButton = document.createElement('button');
        newButton.className = 'sticky-cart-btn';
        updateButtonAppearance(originalButton, newButton);

        stickyButtonContainer.appendChild(newButton);

        newButton.addEventListener('click', function (e) {
          e.preventDefault();
          if (!newButton.disabled) {
            originalButton.click();
          }
        });

        setupButtonObservers(originalButton, newButton);
      } catch (e) {
        console.error('Button mirror error:', e);
      }
    }

    function updateButtonAppearance(original, mirror) {
      try {
        const styles = window.getComputedStyle(original);
        const textElement = original.querySelector(config.cartButtonTextSelector) || original;

        mirror.textContent = textElement.textContent || 'Add to cart';
        mirror.style.backgroundColor = styles.backgroundColor;
        mirror.style.color = styles.color;
        mirror.style.fontWeight = styles.fontWeight;
        mirror.disabled = original.disabled;
      } catch (e) {
        console.error('Button update error:', e);
      }
    }

    function setupButtonObservers(original, mirror) {
      try {
        const observer = new MutationObserver((mutations) => {
          mutations.forEach((mutation) => {
            updateButtonAppearance(original, mirror);
          });
        });

        observer.observe(original, {
          attributes: true,
          childList: true,
          subtree: true,
          attributeFilter: ['class', 'style', 'disabled'],
        });
      } catch (e) {
        console.error('Button observer error:', e);
      }
    }

    function setupScrollHighlighting() {
      try {
        const navLinks = document.querySelectorAll('.sticky-nav-link');
        if (!navLinks.length) return;

        const observerOptions = {
          root: null,
          rootMargin: '0px',
          threshold: 0.1,
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const id = entry.target.id;
              const link = document.querySelector(`.sticky-nav-link[data-anchor="${id}"]`);

              if (link) {
                navLinks.forEach((l) => l.classList.remove(config.highlightClass));
                link.classList.add(config.highlightClass);

                if (stickyNavLinks) {
                  const linkLeft = link.getBoundingClientRect().left;
                  const containerLeft = stickyNavLinks.getBoundingClientRect().left;
                  const containerWidth = stickyNavLinks.offsetWidth;

                  if (linkLeft < containerLeft || linkLeft > containerLeft + containerWidth) {
                    stickyNavLinks.scrollTo({
                      left: link.offsetLeft - containerWidth / 2 + link.offsetWidth / 2,
                      behavior: 'smooth',
                    });
                  }
                }
              }
            }
          });
        }, observerOptions);

        navLinks.forEach((link) => {
          const targetId = link.dataset.anchor;
          if (!targetId) return;

          const targetElement = document.getElementById(targetId);
          if (targetElement) {
            observer.observe(targetElement);

            link.addEventListener('click', function (e) {
              e.preventDefault();
              const elementPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
              const offsetPosition = elementPosition - config.scrollOffset;

              window.scrollTo({
                top: offsetPosition,
                behavior: config.scrollBehavior,
              });
            });
          }
        });

        const firstSection = document.querySelector('[id]');
        if (firstSection) {
          navLinks.forEach((link) => link.classList.remove(config.highlightClass));
          const activeLink = document.querySelector(`.sticky-nav-link[data-anchor="${firstSection.id}"]`);
          if (activeLink) activeLink.classList.add(config.highlightClass);
        }
      } catch (e) {
        console.error('Highlighting error:', e);
      }
    }

    setupZIndexManagement();
    setupStickyNav();
    createButtonMirror();
    setupScrollHighlighting();

    document.addEventListener('keydown', function (e) {
      if (e.key === 'Escape') {
        document.querySelectorAll('.lightbox-container').forEach((lightbox) => {
          lightbox.style.display = 'none';
          document.body.style.overflow = 'auto';
        });
      }
    });
  });
</script>
