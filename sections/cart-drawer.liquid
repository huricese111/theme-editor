{% comment %}
  ============================================================================
  Cart Drawer Section
  ============================================================================
  
  Description: A slide-out shopping cart drawer component for Shopify themes.
  This section provides a comprehensive cart experience with item management,
  cross-selling functionality, and customizable announcements. Only renders
  when cart type is set to drawer (not page or when on cart template).
  
  Features:
  - Slide-out drawer interface with smooth animations
  - Real-time cart item management (add, remove, update quantities)
  - Cross-sell product recommendations (manual or automatic)
  - Customizable announcement messages with positioning options
  - Free shipping progress bar integration
  - Order notes functionality
  - Discount code display and management
  - Responsive design optimized for mobile and desktop
  - AJAX-powered updates without page refresh
  
  Components:
  - Cart header with item count and close button
  - Cart item list with quantity controls
  - Cross-sell product carousel
  - Subtotal and checkout section
  - Announcement blocks (configurable positioning)
  - Custom liquid content area
  
  Dependencies:
  - cart-drawer.js (main functionality)
  - cart-note.js (order notes, conditional)
  - Various icon snippets
  - Cart item snippet
  - Product block snippet for cross-sells
  
  ============================================================================
{% endcomment %}

{%- unless template.name == 'cart' or settings.cart_type == 'page' -%}
{%- capture announcement -%}
  {% if section.settings.show_announcement %}
    {%- liquid
      if section.settings.announcement_enable_box
        assign box_color_brightness = section.settings.announcement_box_color | color_brightness
        if box_color_brightness > 128
          assign box_color_saturation = section.settings.announcement_box_color | color_extract: 'saturation'
          if box_color_saturation > 0
            assign text_col = section.settings.announcement_box_color | color_darken: 60 | color_saturate: 30 | color_to_rgb | split: '(' | last | split: ')' | first
          else
            assign text_col = section.settings.announcement_box_color | color_darken: 60 | color_to_rgb | split: '(' | last | split: ')' | first
          endif
        else
          assign text_col = '255,255,255'
        endif
      endif
    -%}
    <div class="{% if section.settings.announcement_icon != blank or section.settings.announcement_custom_icon != blank %} with-icon{% endif %}{% if section.settings.announcement_enable_box %} text-box text-box--wide{% endif %}" {% if section.settings.announcement_enable_box %}style="--box-color: {{ section.settings.announcement_box_color }}; --box-text-color: {{ text_col }}"{% endif %}>
      {%- if section.settings.announcement_icon == blank and section.settings.announcement_custom_icon == blank -%}
        {{- section.settings.announcement_text -}}
      {%- else -%}
        {% if section.settings.announcement_custom_icon == blank %}
          {% render 'icon', icon: section.settings.announcement_icon, size: section.settings.announcement_icon_size %}
        {% else %}
          <span class="icon icon--image icon--{{ section.settings.announcement_icon_size }}">
            {%- liquid
              if section.settings.announcement_icon_size == 'large'
                assign icon_sizes = '38px'
                assign icon_widths = '38, 76'
              else
                assign icon_sizes = '16px'
                assign icon_widths = '16, 32'
              endif
              render 'image', image: section.settings.announcement_custom_icon, sizes: icon_sizes, widths: icon_widths
            -%}
          </span>
        {% endif %}
        <span class="with-icon__beside">{{ section.settings.announcement_text }}</span>
      {%- endif -%}
    </div>
  {% endif %}
{%- endcapture -%}

<script src="{{ 'cart-drawer.js' | asset_url }}" defer></script>
{%- if section.settings.show_order_note -%}
  <script src="{{ 'cart-note.js' | asset_url }}" defer="defer"></script>
{%- endif -%}

<cart-drawer class="drawer fixed top-0 right-0 flex flex-col w-full has-motion js-cart-drawer" role="dialog" tabindex="-1" aria-labelledby="CartDrawerModal-Title" aria-modal="true" aria-hidden="true" data-name="cart-drawer" data-section-id="{{ section.id }}">
  <cart-form data-section-id="{{ section.id }}" class="cart-drawer" data-ajax-update="true">
    <div class="cart-drawer__content{% if cart.items == empty %} cart-drawer__content--hidden{% endif %}" data-merge-attributes="content-container">
      <div class="cart-drawer__content-upper">
        <header class="cart-drawer__header cart-drawer__content-item">
          <div id="CartDrawerModal-Title" class="cart-drawer__title h4 heading-font" data-merge="header-title">
            {{ 'cart.general.title' | t }}
            {% if cart.items != empty %}
              <span class="cart-drawer__title-count">({{ cart.item_count }})</span>
            {% endif %}
          </div>

          <button type="button" class="drawer__close-btn js-close-drawer">
            <span class="visually-hidden">{{ 'accessibility.close' | t }}</span>
            {% render 'icon-close' %}
          </button>
        </header>

        {%- if settings.show_free_shipping_bar -%}
          <div class="cart-drawer__content-item">
            {%- render 'free-shipping-bar' -%}
          </div>
        {%- endif -%}

        {%- if section.settings.announcement_position == 'above-items' -%}
        <div class="cart-drawer__content-item">
          <div class="cart-info-block cart-info-block--lmtb">{{- announcement -}}</div>
        </div>
      {%- endif -%}

        <div class="cart-item-list cart-drawer__content-item">
          <div class="cart-item-list__body" data-merge-list="cart-items">
            {% for item in cart.items %}
              <div data-merge-list-item="item-key:{{ item.key }}|{{ item.final_price }}{% for discount_allocation in item.line_level_discount_allocations %}|{{ discount_allocation.discount_application.title | escape }}{% endfor %}"
                  {% comment %} Discount items are difficult to predict - BOGOFs appear as a separate item with the same key as an existing item - simpler to always refresh {% endcomment %}
                  {%- if item.line_level_discount_allocations == empty -%}
                  data-merge-cache="{{ item.key }}|{{ item.quantity }}|{{ item.final_line_price }}|{% if item.selling_plan_allocation %}{{ item.selling_plan_allocation.selling_plan.id }}{% endif %}"
                  {%- endif -%}
                  data-product-id="{{ item.product.id }}">
                {%- render 'cart-item', item: item, forloop: forloop, drawer: true -%}
              </div>
            {% endfor %}
          </div>
        </div>

        {%- if section.settings.announcement_position == 'below-items' -%}
          <div class="cart-drawer__content-item">
            <div class="cart-info-block cart-info-block--lmtb">{{- announcement -}}</div>
          </div>
        {%- endif -%}
      </div>

      <div data-merge="cross-sells" data-merge-cache="{% if cart.items == blank %}blank{% else %}{{ cart.items.first.product.id }}{% endif %}">
        {%- liquid
          if section.settings.enable_cross_sells
            if cart.items == empty
              if section.settings.cross_sell_products != blank
                assign cross_sell_product_list = true
              endif
            else
              if section.settings.enable_automatic_cross_sells
                assign cross_sell_auto = true
              elsif section.settings.cross_sell_products != blank
                assign cross_sell_product_list = true
              endif
            endif
          endif
        -%}
        {%- if cross_sell_product_list or cross_sell_auto -%}
          <div class="cart-item-upsells">
            <cc-cart-cross-sell{% if cross_sell_auto %} data-from="{{ routes.product_recommendations_url }}?section_id=mini-related-products&limit=8&product_id={{ cart.items.first.product.id }}"{% endif %}>
              <carousel-slider class="carousel block collection-slider cart-drawer__content-item use-color-scheme use-color-scheme--{{ section.settings.croll_sell_color_scheme }}">
                <div class="opposing-items opposing-items--valign-base very-lightly-spaced-row">
                  <div class="opposing-items__left product-info-label">{{ section.settings.cross_sell_title | escape }}</div>
                  <div class="no-wrap slider-nav">
                    <button name="prev" class="slider-nav__btn has-ltr-icon">{% render 'icon-chevron-left' %}</button>
                    <button name="next" class="slider-nav__btn has-ltr-icon">{% render 'icon-chevron-right' %}</button>
                  </div>
                </div>
                <div class="slider slider--no-scrollbar slider--edge-peek">
                  <ul class="slider__grid product-grid product-grid--carousel product-grid--per-row-2 product-grid--per-row-mob-2">
                    {%- if cross_sell_product_list -%}
                      {%- liquid
                        if settings.prod_thumb_shape == 'portrait-23'
                          assign chosen_aspect_ratio = 0.67
                        elsif settings.prod_thumb_shape == 'portrait-45'
                          assign chosen_aspect_ratio = 0.8
                        elsif settings.prod_thumb_shape == 'square'
                          assign chosen_aspect_ratio = 1.0
                        elsif settings.prod_thumb_shape == 'landscape-54'
                          assign chosen_aspect_ratio = 1.25
                        elsif settings.prod_thumb_shape == 'landscape-32'
                          assign chosen_aspect_ratio = 1.50
                        elsif settings.prod_thumb_shape == 'tallest'
                          assign chosen_aspect_ratio = 99
                          for product in section.settings.cross_sell_products
                            if product.featured_media.preview_image.aspect_ratio < chosen_aspect_ratio
                              assign chosen_aspect_ratio = product.featured_media.preview_image.aspect_ratio
                            endif
                          endfor
                        else
                          assign chosen_aspect_ratio = 0
                          for product in section.settings.cross_sell_products
                            if product.featured_media.preview_image.aspect_ratio > chosen_aspect_ratio
                              assign chosen_aspect_ratio = product.featured_media.preview_image.aspect_ratio
                            endif
                          endfor
                        endif
                      -%}

                      {%- for product in section.settings.cross_sell_products -%}
                        <li class="slider__item">
                          {%- render 'product-block', product: product, manual_loading: true, no_quick_buy: true, no_swiping: true, custom_aspect_ratio: chosen_aspect_ratio -%}
                        </li>
                      {%- endfor -%}
                    {%- endif -%}
                  </ul>
                </div>
              </carousel-slider>
            </cross-sell-products>
          </div>
        {%- endif -%}
      </div>
    </div>

    <div class="cart-drawer__footer{% if cart.items == empty %} cart-drawer__footer--hidden{% endif %}" data-merge-attributes="footer-container">
      {%- if section.settings.announcement_position == 'above-subtotal' -%}
        <div class="cart-info-block cart-info-block--smb">{{- announcement -}}</div>
      {%- endif -%}

      <div data-merge="footer">
        {% if cart.items != empty %}
          {%- if cart.cart_level_discount_applications != blank -%}
            <ul class="cart-discount-list">
              {%- for discount_application in cart.cart_level_discount_applications -%}
                <li class="cart-discount cart-discount--inline">
                  <span class="cart-discount__label">
                      <span class="cart-discount__icon">{% render 'icon-label' %}</span>
                      <span class="cart-discount__title">{{ discount_application.title }}</span>
                  </span>
                  <span class="cart-discount__amount theme-money">{{ discount_application.total_allocated_amount | money }}</span>
                </li>
              {%- endfor -%}
            </ul>
          {%- endif -%}
          <div class="subtotal h4 heading-font opposing-items">
            {{ 'cart.summary.subtotal' | t }}:
            <span class="theme-money">
              {%- if settings.cart_currency_code_enabled -%}
                {{- cart.total_price | money_with_currency -}}
              {%- else -%}
                {{- cart.total_price | money -}}
              {%- endif -%}
            </span>
          </div>

          <div class="lightly-spaced-row">
            {%- if section.settings.show_tax_and_shipping -%}
              <div class="cart-policies rte">
                {%- if cart.taxes_included and shop.shipping_policy.body != blank -%}
                  {{- 'cart.general.taxes_included_shipping_at_checkout_html' | t: link: shop.shipping_policy.url -}}
                {%- elsif cart.taxes_included -%}
                  {{- 'cart.general.taxes_included_shipping_at_checkout' | t -}}
                {%- elsif shop.shipping_policy.body != blank -%}
                  {{- 'cart.general.taxes_and_shipping_at_checkout_html' | t: link: shop.shipping_policy.url -}}
                {%- else -%}
                  {{- 'cart.general.taxes_and_shipping_at_checkout' | t -}}
                {%- endif -%}
              </div>
            {%- endif -%}

            {% if section.settings.show_order_note %}
              <toggle-target id="CartDrawerNoteToggle" role="button" tabindex="0" class="toggle-target-toggler--is-hidden link underline" data-toggle-target=".cart-drawer__note">{{ 'cart.note.label' | t }}</toggle-target>
              <div class="cart-drawer__note toggle-target toggle-target--hidden">
                <cart-note class="block toggle-target-container">
                  <textarea name="note" aria-labelledby="CartDrawerNoteToggle">{{ cart.note }}</textarea>
                </cart-note>
              </div>
            {% endif %}
          </div>
        {% endif %}
      </div>

      {% if section.settings.cart_terms_page != blank %}
        <terms-agreement class="terms-agreement rte">
          <input type="checkbox" id="terms" />
          <label for="terms">{{ 'cart.terms.agreement_html' | t: terms_url: section.settings.cart_terms_page }}</label>
        </terms-agreement>
      {% endif %}

      

      <div class="checkout-buttons{% if cart.items == empty %} hidden{% endif %}" data-merge-attributes="checkout-buttons">
        {% if section.settings.enable_direct_cart %}
          <a href="{{ routes.root_url | append: '/checkout' | replace: '//', '/' }}" 
             class="btn btn--large btn--wide">
            {{ 'cart.summary.checkout' | t }}
          </a>
        {% else %}
          <a href="{{ routes.cart_url }}" 
             class="btn btn--large btn--wide">
            {{ 'cart.summary.checkout' | t }}
          </a>
        {% endif %}
      </div>

      {%- if section.settings.announcement_position == 'below-checkout' -%}
        <div class="cart-info-block cart-info-block--smt">{{- announcement -}}</div>
      {%- endif -%}
    </div>

    <div
      class="cart-drawer__empty-content{% if section.settings.empty_enable_custom_colors %} cart-drawer__empty-content--custom-colors{% endif %}{% if cart.items != empty %} cart-drawer__empty-content--hidden{% endif %}"
      data-merge-attributes="empty-container"
      {% if section.settings.empty_enable_custom_colors %}
        style="--bg: {{ section.settings.empty_color_background_gradient | default: section.settings.empty_color_background }};
              --text: {{ section.settings.empty_color_text }};
              --text-dim: {{ section.settings.empty_color_text | color_modify: 'alpha', 0.4 }}"
      {% endif %}>
      <button type="button" class="drawer__close-btn js-close-drawer">
        <span class="visually-hidden">{{ 'accessibility.close' | t }}</span>
        {% render 'icon-close' %}
      </button>
      <div class="align-center">
        {%- if section.settings.empty_icon == 'basket' -%}
          <div class="lightly-spaced-row"><span class="icon--large">{%- render 'icon-basket' -%}</span></div>
        {%- elsif section.settings.empty_icon == 'bag' -%}
          <div class="lightly-spaced-row"><span class="icon--large">{%- render 'icon-bag' -%}</span></div>
        {%- elsif section.settings.empty_icon == 'cart' -%}
          <div class="lightly-spaced-row"><span class="icon--large">{%- render 'icon-cart' -%}</span></div>
        {%- endif -%}

        {%- if section.settings.empty_heading != blank -%}
          <div class="majortitle h1">{{ section.settings.empty_heading }}</div>
        {%- endif -%}

        {%- if section.settings.empty_text != blank -%}
          <div class="rte">{{ section.settings.empty_text }}</div>
        {%- endif -%}

        {%- if section.settings.empty_button_text != blank -%}
          <div class="button-row">
            <a class="{% if section.settings.empty_button_style != 'link' %}btn btn--{{ section.settings.empty_button_style }}{% else %}small-feature-link{% endif %} button-row__btn" href="{{ section.settings.empty_button_link }}">{{ section.settings.empty_button_text | escape }}</a>
          </div>
        {%- endif -%}

       
      </div>
    </div>
  </cart-form>
</cart-drawer>
{%- endunless -%}

{% if section.settings.enable_product_limits %}
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // 获取限购产品ID列表
    {% if section.settings.enable_product_limits and section.settings.limited_products != blank %}
      const limitedProductIds = [
        {% for product in section.settings.limited_products %}
          "{{ product.id }}",
        {% endfor %}
      ];
      
      // 多语言提示信息
      const messages = {
        'en': "{{ section.settings.limit_message_en | escape }}",
        'de': "{{ section.settings.limit_message_de | escape }}",
        'fr': "{{ section.settings.limit_message_fr | escape }}",
        'fi': "{{ section.settings.limit_message_fi | escape }}"
      };
    
      // 获取当前语言
      const lang = document.documentElement.lang.split('-')[0] || 'en';
      const message = messages[lang] || messages['en'];
      
      // 创建弹窗函数
      function showLimitModal() {
        // 如果已有弹窗则不再创建
        if (document.querySelector('.product-limit-modal')) return;
        
        const modal = document.createElement('div');
        modal.className = 'product-limit-modal';
        modal.innerHTML = `
          <div class="product-limit-modal-content">
            <div class="product-limit-modal-body">
              <div class="product-limit-modal-icon">
                <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <circle cx="12" cy="12" r="10"></circle>
                  <line x1="12" y1="8" x2="12" y2="12"></line>
                  <line x1="12" y1="16" x2="12.01" y2="16"></line>
                </svg>
              </div>
              <div class="product-limit-modal-message">${message}</div>
              <button class="product-limit-modal-ok">{{ 'accessibility.close' | t }}</button>
            </div>
            <button class="product-limit-modal-close" aria-label="Close">
              <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          </div>
        `;
        document.body.appendChild(modal);
        
        // 点击确定按钮
        modal.querySelector('.product-limit-modal-ok').addEventListener('click', function() {
          document.body.removeChild(modal);
        });
        
        // 点击关闭按钮
        modal.querySelector('.product-limit-modal-close').addEventListener('click', function() {
          document.body.removeChild(modal);
        });
        
        // 点击背景关闭
        modal.addEventListener('click', function(e) {
          if (e.target === modal) {
            document.body.removeChild(modal);
          }
        });

        // 添加动画效果
        setTimeout(() => {
          modal.classList.add('is-active');
        }, 10);
      }
      
      // 监听购物车变化
      function setupQuantityLimits() {
        // 监听数量变化
        document.addEventListener('change', function(e) {
          if (e.target.classList.contains('cart-item__quantity-input')) {
            const item = e.target.closest('[data-product-id]');
            if (!item) return;
            
            const productId = item.getAttribute('data-product-id');
            if (limitedProductIds.includes(productId) && parseInt(e.target.value) > 2) {
              e.target.value = 2;
              showLimitModal();
            }
          }
        });
        
        // 监听增加按钮点击
        document.addEventListener('click', function(e) {
          if (e.target.closest('.quantity-up')) {
            const item = e.target.closest('[data-product-id]');
            if (!item) return;
            
            const productId = item.getAttribute('data-product-id');
            const input = item.querySelector('.cart-item__quantity-input');
            
            if (limitedProductIds.includes(productId) && parseInt(input.value) >= 2) {
              e.preventDefault();
              e.stopPropagation();
              showLimitModal();
              return false;
            }
          }
        }, true);
      }
      
      // 初始化
      setupQuantityLimits();
    {% endif %}
    
    // 零元下单提示功能
    window.showZeroPriceModal = function() {
      // 检查是否启用了零元限购功能
      const enableZeroPriceRestriction = {{ section.settings.enable_zero_price_restriction | json }};
      if (!enableZeroPriceRestriction) return;
      
      // 如果已有弹窗则不再创建
      if (document.querySelector('.product-limit-modal')) return;
      
      // 多语言提示信息
      const zeroPriceMessages = {
        'en': "{{ section.settings.zero_price_message_en | escape }}",
        'de': "{{ section.settings.zero_price_message_de | escape }}",
        'fr': "{{ section.settings.zero_price_message_fr | escape }}",
        'fi': "{{ section.settings.zero_price_message_fi | escape }}"
      };
      
      // 获取当前语言
      const lang = document.documentElement.lang.split('-')[0] || 'en';
      const message = zeroPriceMessages[lang] || zeroPriceMessages['en'];
      
      const modal = document.createElement('div');
      modal.className = 'product-limit-modal';
      modal.innerHTML = `
        <div class="product-limit-modal-content">
          <div class="product-limit-modal-body">
            <div class="product-limit-modal-icon">
              <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="8" x2="12" y2="12"></line>
                <line x1="12" y1="16" x2="12.01" y2="16"></line>
              </svg>
            </div>
            <div class="product-limit-modal-message">${message}</div>
            <button class="product-limit-modal-ok">{{ 'accessibility.close' | t }}</button>
          </div>
          <button class="product-limit-modal-close" aria-label="Close">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
      `;
      document.body.appendChild(modal);
      
      // 点击确定按钮
      modal.querySelector('.product-limit-modal-ok').addEventListener('click', function() {
        document.body.removeChild(modal);
      });
      
      // 点击关闭按钮
      modal.querySelector('.product-limit-modal-close').addEventListener('click', function() {
        document.body.removeChild(modal);
      });
      
      // 点击背景关闭
      modal.addEventListener('click', function(e) {
        if (e.target === modal) {
          document.body.removeChild(modal);
        }
      });

      // 添加动画效果
      setTimeout(() => {
        modal.classList.add('is-active');
      }, 10);
    };
    
    // 监听购物车变化并更新结账按钮状态
    function updateCheckoutButtonState() {
      // 获取结账按钮
      const checkoutButtons = document.querySelectorAll('.checkout-buttons .btn');
      if (!checkoutButtons.length) return;
      
      // 按钮始终保持可用状态
      checkoutButtons.forEach(button => {
        button.classList.remove('btn--disabled');
        button.removeAttribute('onclick');
      });
    }

    // 监听购物车变化事件
    document.addEventListener('cart:updated', function(event) {
      // 获取更新后的购物车数据
      const cartData = event.detail.cart;
      const enableZeroPriceRestriction = {{ section.settings.enable_zero_price_restriction | json }};
      
      // 获取结账按钮
      const checkoutButtons = document.querySelectorAll('.checkout-buttons .btn');
      
      // 按钮始终保持可用状态
      checkoutButtons.forEach(button => {
        button.classList.remove('btn--disabled');
        button.removeAttribute('onclick');
      });
    });

    // 初始化时执行一次
    updateCheckoutButtonState();
  });
</script>

<style>
  .product-limit-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 9999;
    opacity: 0;
    transition: all 0.3s ease;
    backdrop-filter: blur(4px);
  }
  
  .product-limit-modal.is-active {
    opacity: 1;
  }
  
  .product-limit-modal-content {
    position: relative;
    background-color: #ffffff;
    border-radius: 16px;
    max-width: 450px;
    width: 90%;
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    transform: scale(0.9);
    transition: transform 0.3s cubic-bezier(0.34, 1.56, 0.64, 1);
    overflow: hidden;
  }
  
  .product-limit-modal.is-active .product-limit-modal-content {
    transform: scale(1);
  }
  
  .product-limit-modal-body {
    padding: 40px 32px;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  
  .product-limit-modal-icon {
    margin-bottom: 24px;
    color: #e53e3e;
    height: 48px;
    width: 48px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }
  
  .product-limit-modal-icon::before {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    border-radius: 50%;
    background-color: rgba(229, 62, 62, 0.2);
    animation: pulse-circle 2s infinite;
  }
  
  @keyframes pulse-circle {
    0% {
      transform: scale(0.95);
      box-shadow: 0 0 0 0 rgba(229, 62, 62, 0.4);
    }
    
    70% {
      transform: scale(1.1);
      box-shadow: 0 0 0 10px rgba(229, 62, 62, 0);
    }
    
    100% {
      transform: scale(0.95);
      box-shadow: 0 0 0 0 rgba(229, 62, 62, 0);
    }
  }
  
  .product-limit-modal-icon svg {
    z-index: 1;
  }
  
  .product-limit-modal-message {
    font-size: 18px;
    line-height: 1.6;
    color: #1a202c;
    margin-bottom: 32px;
    font-weight: 500;
  }
  
  .product-limit-modal-ok {
    background-color: #3182ce;
    color: white;
    border: none;
    padding: 12px 32px;
    font-size: 16px;
    font-weight: 600;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    box-shadow: 0 4px 6px rgba(49, 130, 206, 0.25);
  }
  
  .product-limit-modal-ok:hover {
    background-color: #2b6cb0;
    transform: translateY(-2px);
    box-shadow: 0 7px 14px rgba(49, 130, 206, 0.3);
  }
  
  .product-limit-modal-ok:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(49, 130, 206, 0.4);
  }
  
  .product-limit-modal-ok:active {
    transform: translateY(0);
  }
  
  .product-limit-modal-close {
    position: absolute;
    top: 16px;
    right: 16px;
    background: none;
    border: none;
    color: #a0aec0;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
    padding: 0;
  }
  
  .product-limit-modal-close:hover {
    background-color: #f7fafc;
    color: #4a5568;
    transform: rotate(90deg);
  }
  
  /* 禁用按钮样式 */
  .btn--disabled {
    opacity: 0.6;
    cursor: not-allowed;
    pointer-events: none;
    background-color: #e2e8f0 !important;
    color: #718096 !important;
    box-shadow: none !important;
    transform: none !important;
    border-color: #e2e8f0 !important;
  }
  
  @media (max-width: 640px) {
    .product-limit-modal-body {
      padding: 32px 24px;
    }
    
    .product-limit-modal-message {
      font-size: 16px;
      margin-bottom: 24px;
    }
  }
</style>
{% endif %}

{% schema %}
{
  "name": "Cart drawer",
  "class": "section-cart-drawer",
  "settings": [
    {
      "type": "checkbox",
      "id": "show_order_note",
      "label": "Show order note",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "show_tax_and_shipping",
      "label": "Show tax status and shipping policy link",
      "default": true
    },
    {
      "type": "checkbox",
      "id": "enable_direct_cart",
      "label": "Enable direct checkout",
      "info": "Disable to send customers to the cart page",
      "default": true
    },
    {
      "type": "url",
      "id": "cart_terms_page",
      "label": "Terms and Conditions link",
      "info": "Checkbox only required if direct checkout is enabled"
    },
    {
      "type": "checkbox",
      "id": "show_backorder_text",
      "label": "Show backorder text",
      "default": false,
      "info": "Only shows for products which use inventory tracking and are available to purchase when out of stock."
    },
    {
      "type": "header",
      "content": "Product Quantity Limits"
    },
    {
      "type": "checkbox",
      "id": "enable_product_limits",
      "label": "Enable product quantity limits",
      "default": false
    },
    {
      "type": "product_list",
      "id": "limited_products",
      "label": "Products with quantity limit",
      "info": "Selected products will be limited to maximum 2 items per cart"
    },
    {
      "type": "header",
      "content": "Limit Messages"
    },
    {
      "type": "text",
      "id": "limit_message_en",
      "label": "Limit message (English)",
      "default": "You can only purchase a maximum of 2 of this product."
    },
    {
      "type": "text",
      "id": "limit_message_de",
      "label": "Limit message (German)",
      "default": "Sie können maximal 2 Stück dieses Produkts kaufen."
    },
    {
      "type": "text",
      "id": "limit_message_fr",
      "label": "Limit message (French)",
      "default": "Vous ne pouvez acheter que 2 exemplaires maximum de ce produit."
    },
    {
      "type": "text",
      "id": "limit_message_fi",
      "label": "Limit message (Finnish)",
      "default": "Voit ostaa enintään 2 kappaletta tätä tuotetta."
    },
    {
      "type": "header",
      "content": "Zero Price Checkout Settings"
    },
    {
      "type": "checkbox",
      "id": "enable_zero_price_restriction",
      "label": "Enable zero price checkout restriction",
      "info": "When enabled, prevents checkout when cart total is zero",
      "default": false
    },
    {
      "type": "header",
      "content": "Zero Price Messages"
    },
    {
      "type": "text",
      "id": "zero_price_message_en",
      "label": "Zero price message (English)",
      "default": "Orders with zero total cannot be processed. Please add items to your cart."
    },
    {
      "type": "text",
      "id": "zero_price_message_de",
      "label": "Zero price message (German)",
      "default": "Bestellungen mit einem Gesamtbetrag von Null können nicht bearbeitet werden. Bitte fügen Sie Artikel zu Ihrem Warenkorb hinzu."
    },
    {
      "type": "text",
      "id": "zero_price_message_fr",
      "label": "Zero price message (French)",
      "default": "Les commandes d'un montant total de zéro ne peuvent pas être traitées. Veuillez ajouter des articles à votre panier."
    },
    {
      "type": "text",
      "id": "zero_price_message_fi",
      "label": "Zero price message (Finnish)",
      "default": "Tilauksia, joiden kokonaissumma on nolla, ei voida käsitellä. Lisää tuotteita ostoskoriisi."
    },
    {
      "type": "header",
      "content": "Inventory notice"
    },
    {
      "type": "select",
      "id": "show_inventory_notice",
      "label": "Show inventory notice",
      "options": [
        {
          "label": "Never",
          "value": "never"
        },
        {
          "label": "When inventory low",
          "value": "low"
        },
        {
          "label": "Always",
          "value": "always"
        }
      ],
      "default": "low"
    },
    {
      "type": "select",
      "id": "show_inventory_count",
      "label": "Show count in inventory notice",
      "options": [
        {
          "label": "Never",
          "value": "never"
        },
        {
          "label": "When inventory low",
          "value": "low"
        },
        {
          "label": "Always",
          "value": "always"
        }
      ],
      "default": "low"
    },
    {
      "type": "range",
      "id": "inventory_threshold",
      "min": 1,
      "max": 100,
      "step": 1,
      "label": "Low inventory threshold",
      "default": 10
    },
    {
      "type": "header",
      "content": "Announcement"
    },
    {
      "type": "checkbox",
      "id": "show_announcement",
      "label": "Show announcement",
      "default": false
    },
    {
      "type": "select",
      "id": "announcement_position",
      "label": "Position",
      "options": [
        {
          "label": "Above cart items",
          "value": "above-items"
        },
        {
          "label": "Below cart items",
          "value": "below-items"
        },
        {
          "label": "Above subtotal",
          "value": "above-subtotal"
        },
        {
          "label": "Below checkout button",
          "value": "below-checkout"
        }
      ],
      "default": "above-items"
    },
    {
      "type": "inline_richtext",
      "id": "announcement_text",
      "label": "Text",
      "default": "Cart announcement text"
    },
    {
      "type": "select",
      "id": "announcement_icon",
      "label": "Icon",
      "default": "box",
      "options": [
        {
          "value": "",
          "label": "No icon"
        },
        {
          "value": "award",
          "label": "Award"
        },
        {
          "value": "box",
          "label": "Box"
        },
        {
          "value": "briefcase",
          "label": "Briefcase"
        },
        {
          "value": "calendar",
          "label": "Calendar"
        },
        {
          "value": "chat_bubble",
          "label": "Chat bubble"
        },
        {
          "value": "check_mark",
          "label": "Check mark"
        },
        {
          "value": "check_mark_in_circle",
          "label": "Check mark in circle"
        },
        {
          "value": "clock",
          "label": "Clock"
        },
        {
          "value": "credit_card",
          "label": "Credit card"
        },
        {
          "value": "dollar_sign",
          "label": "Dollar sign"
        },
        {
          "value": "dryer",
          "label": "Dryer"
        },
        {
          "value": "eye",
          "label": "Eye"
        },
        {
          "value": "feather",
          "label": "Feather"
        },
        {
          "value": "gift",
          "label": "Gift"
        },
        {
          "value": "heart",
          "label": "Heart"
        },
        {
          "value": "iron",
          "label": "Iron"
        },
        {
          "value": "leaf",
          "label": "Leaf"
        },
        {
          "value": "leather",
          "label": "Leather"
        },
        {
          "value": "lock",
          "label": "Lock"
        },
        {
          "value": "map_pin",
          "label": "Map pin"
        },
        {
          "value": "pants",
          "label": "Pants"
        },
        {
          "value": "percent",
          "label": "Percent"
        },
        {
          "value": "plane",
          "label": "Plane"
        },
        {
          "value": "price_tag",
          "label": "Price tag"
        },
        {
          "value": "question_mark",
          "label": "Question mark"
        },
        {
          "value": "return",
          "label": "Return"
        },
        {
          "value": "ruler",
          "label": "Ruler"
        },
        {
          "value": "scissors",
          "label": "Scissors"
        },
        {
          "value": "shirt",
          "label": "Shirt"
        },
        {
          "value": "shoe",
          "label": "Shoe"
        },
        {
          "value": "silhouette",
          "label": "Silhouette"
        },
        {
          "value": "star",
          "label": "Star"
        },
        {
          "value": "truck",
          "label": "Truck"
        },
        {
          "value": "washing",
          "label": "Washing"
        }
      ]
    },
    {
      "type": "image_picker",
      "id": "announcement_custom_icon",
      "label": "Custom icon"
    },
    {
      "type": "select",
      "id": "announcement_icon_size",
      "label": "Icon size",
      "default": "small",
      "options": [
        {
          "value": "small",
          "label": "Small"
        },
        {
          "value": "large",
          "label": "Large"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "announcement_enable_box",
      "label": "Enable box style",
      "default": true
    },
    {
      "type": "color",
      "id": "announcement_box_color",
      "label": "Box color",
      "info": "Suggestions: Blue #e5f3ff, Teal #e0f5f5, Green #e0f4d5, Yellow #fcf1cd, Red #fbeae5",
      "default": "#e0f4d5"
    },
    {
      "type": "header",
      "content": "Empty cart"
    },
    {
      "type": "select",
      "id": "empty_icon",
      "label": "Icon",
      "default": "basket",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "bag",
          "label": "Bag"
        },
        {
          "value": "basket",
          "label": "Basket"
        },
        {
          "value": "cart",
          "label": "Cart"
        }
      ]
    },
    {
      "type": "text",
      "id": "empty_heading",
      "label": "Heading",
      "default": "Your cart is empty"
    },
    {
      "type": "richtext",
      "id": "empty_text",
      "label": "Text"
    },
    {
      "type": "text",
      "id": "empty_button_text",
      "label": "Button text",
      "default": "Start shopping"
    },
    {
      "type": "url",
      "id": "empty_button_link",
      "label": "Button link",
      "default": "/collections/all"
    },
    {
      "type": "select",
      "id": "empty_button_style",
      "label": "Button style",
      "default": "primary",
      "options": [
        {
          "label": "Primary",
          "value": "primary"
        },
        {
          "label": "Secondary",
          "value": "secondary"
        },
        {
          "label": "Link",
          "value": "link"
        }
      ]
    },
    {
      "type": "checkbox",
      "id": "empty_enable_custom_colors",
      "label": "Enable custom colors",
      "default": false
    },
    {
      "type": "color",
      "id": "empty_color_background",
      "label": "Background"
    },
    {
      "type": "color_background",
      "id": "empty_color_background_gradient",
      "label": "Background gradient"
    },
    {
      "type": "color",
      "id": "empty_color_text",
      "label": "Text"
    },
    {
      "type": "header",
      "content": "Recommended products"
    },
    {
      "type": "checkbox",
      "id": "enable_cross_sells",
      "label": "Show recommended products",
      "default": true
    },
    {
      "type": "text",
      "id": "cross_sell_title",
      "label": "Heading",
      "default": "You may like"
    },
    {
      "type": "product_list",
      "id": "cross_sell_products",
      "label": "Products"
    },
    {
      "type": "checkbox",
      "id": "enable_automatic_cross_sells",
      "label": "Enable automatic recommendations",
      "info": "Displays products related to the first item in the cart, replacing the recommended products above.",
      "default": true
    },
    {
      "type": "paragraph",
      "content": "Dynamic recommendations change and improve with time. [Learn more](https://help.shopify.com/en/themes/development/recommended-products)"
    },
    {
      "type": "select",
      "id": "croll_sell_color_scheme",
      "label": "Color scheme",
      "default": "1",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "1",
          "label": "1"
        },
        {
          "value": "2",
          "label": "2"
        }
      ]
    }
  ]
}
{% endschema %}