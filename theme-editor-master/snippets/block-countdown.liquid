{% assign locale_prefix = request.locale.iso_code | split: '-' | first %}

<div
  class="countdown-block block-id-{{ block.id }}"
  data-end-date="{{ block.settings.end_date }}"
  data-end-time="{{ block.settings.end_time }}"
  data-hide-on-end="{{ block.settings.hide_on_end }}"
  style="display: flex; justify-content: center; padding: 15px 0;"
>
  {% assign days_text = 'day' %}
  {% assign hours_text = 'Hrs' %}
  {% assign minutes_text = 'Min' %}
  {% assign seconds_text = 'Sec' %}
  {% assign end_text_translated = block.settings.end_text %}

  {% case locale_prefix %}
    {% when 'de' %}
      {% assign days_text = 'Tag' %}
      {% assign hours_text = 'Std' %}
      {% assign minutes_text = 'Min' %}
      {% assign seconds_text = 'Sek' %}
      {% assign end_text_translated = block.settings.end_text_de | default: block.settings.end_text %}

    {% when 'fr' %}
      {% assign days_text = 'Jou' %}
      {% assign hours_text = 'Hrs' %}
      {% assign minutes_text = 'Min' %}
      {% assign seconds_text = 'Sec' %}
      {% assign end_text_translated = block.settings.end_text_fr | default: block.settings.end_text %}

    {% when 'fi' %}
      {% assign days_text = 'Pv√§' %}
      {% assign hours_text = 'Tun' %}
      {% assign minutes_text = 'Min' %}
      {% assign seconds_text = 'Ssek' %}
      {% assign end_text_translated = block.settings.end_text_fi | default: block.settings.end_text %}
  {% endcase %}

  <div class="countdown-container">
    <div class="countdown-timer">
      <div class="countdown-unit">
        <span class="countdown-number" id="days-{{ block.id }}">00</span>
        <span class="countdown-label">{{ days_text }}</span>
      </div>
      <div class="countdown-separator">:</div>
      <div class="countdown-unit">
        <span class="countdown-number" id="hours-{{ block.id }}">00</span>
        <span class="countdown-label">{{ hours_text }}</span>
      </div>
      <div class="countdown-separator">:</div>
      <div class="countdown-unit">
        <span class="countdown-number" id="minutes-{{ block.id }}">00</span>
        <span class="countdown-label">{{ minutes_text }}</span>
      </div>
      <div class="countdown-separator">:</div>
      <div class="countdown-unit">
        <span class="countdown-number" id="seconds-{{ block.id }}">00</span>
        <span class="countdown-label">{{ seconds_text }}</span>
      </div>
    </div>
    <div class="countdown-end-text" id="end-text-{{ block.id }}" style="display: none;">
      {{ end_text_translated }}
    </div>
  </div>
</div>

{% style %}
  .block-id-{{ block.id }} .countdown-timer {
    display: flex;
    align-items: baseline;
    gap: 8px;
  }

  .block-id-{{ block.id }} .countdown-unit {
    display: flex;
    flex-direction: column;
    align-items: center;
    min-width: 50px;
  }

  .block-id-{{ block.id }} .countdown-number {
    font-size: {{ block.settings.number_size }}px;
    color: {{ block.settings.countdown_number_color }};
    font-weight: 700;
    min-width: 2ch;
    text-align: center;
  }

  .block-id-{{ block.id }} .countdown-label {
    font-size: 14px;
    color: {{ block.settings.countdown_label_color }};
    font-weight: normal !important;
    text-transform: uppercase;
    margin-top: 4px;
    letter-spacing: 0.5px;
  }

  .block-id-{{ block.id }} .countdown-separator {
    font-size: calc({{ block.settings.number_size }}px * 0.9);
    color: {{ block.settings.countdown_number_color }};
    margin: 0 -4px;
    transform: translateY(-5px);
  }
{% endstyle %}

<script>
  document.addEventListener('DOMContentLoaded', function () {
    function initializeCountdown(blockId) {
      const block = document.querySelector(`.block-id-${blockId}`);
      const endDate = block.dataset.endDate;
      const endTime = block.dataset.endTime;
      const hideOnEnd = block.dataset.hideOnEnd === 'true';

      const endDateTime = new Date(`${endDate}T${endTime}:00`).getTime();

      function updateCountdown() {
        const now = new Date().getTime();
        const distance = endDateTime - now;

        if (distance <= 0) {
          clearInterval(countdownInterval);
          if (hideOnEnd) {
            block.style.display = 'none';
          } else {
            document.getElementById(`days-${blockId}`).parentElement.parentElement.style.display = 'none';
            document.getElementById(`end-text-${blockId}`).style.display = 'block';
          }
          return;
        }

        const days = Math.floor(distance / (1000 * 60 * 60 * 24));
        const hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
        const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
        const seconds = Math.floor((distance % (1000 * 60)) / 1000);

        document.getElementById(`days-${blockId}`).textContent = days.toString().padStart(2, '0');
        document.getElementById(`hours-${blockId}`).textContent = hours.toString().padStart(2, '0');
        document.getElementById(`minutes-${blockId}`).textContent = minutes.toString().padStart(2, '0');
        document.getElementById(`seconds-${blockId}`).textContent = seconds.toString().padStart(2, '0');
      }

      updateCountdown();
      const countdownInterval = setInterval(updateCountdown, 1000);
    }

    initializeCountdown('{{ block.id }}');
  });
</script>
