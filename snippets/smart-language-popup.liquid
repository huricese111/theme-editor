{% comment %}
  Smart Language Selection Popup
  Features:
  - Shopify native geolocation detection with caching
  - Auto-detect user location and language
  - Show popup on first visit or language mismatch
  - Two-tier country selection (detected + manual)
{% endcomment %}

<div id="language-popup" class="language-popup hidden" data-popup>
  <div class="language-popup__overlay"></div>
  <div class="language-popup__content">
    <div class="language-popup__header">
      <h2 class="language-popup__title">Choose your location and language</h2>
      <button class="language-popup__close" data-close-popup aria-label="Close">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
        </svg>
      </button>
    </div>
    
    <div class="language-popup__body">
      <!-- Detected Location Section -->
      <div class="language-popup__section">
        <h3 class="language-popup__section-title">Your current location and available languages</h3>
        <div class="language-popup__detected" id="detected-location">
          <div class="language-option" data-loading>
            <span class="language-option__flag">üåç</span>
            <span class="language-option__country">Detecting location...</span>
            <div class="language-option__languages">
              <span class="language-option__lang detecting">Loading...</span>
            </div>
          </div>
        </div>
      </div>
      
      <hr class="language-popup__divider">
      
      <!-- Manual Selection Section -->
      <div class="language-popup__section">
        <h3 class="language-popup__section-title">Europe</h3>
        <div class="language-popup__countries">
          <!-- Germany -->
          <div class="language-option" data-country="DE">
            <span class="language-option__flag">üá©üá™</span>
            <span class="language-option__country">Deutschland</span>
            <div class="language-option__languages">
              <button class="language-option__lang" data-locale="de-DE" data-country="DE">Deutsch</button>
              <button class="language-option__lang" data-locale="en-DE" data-country="DE">English</button>
            </div>
          </div>
          
          <!-- France -->
          <div class="language-option" data-country="FR">
            <span class="language-option__flag">üá´üá∑</span>
            <span class="language-option__country">France</span>
            <div class="language-option__languages">
              <button class="language-option__lang" data-locale="fr-FR" data-country="FR">Fran√ßais</button>
              <button class="language-option__lang" data-locale="en-FR" data-country="FR">English</button>
            </div>
          </div>
          
          <!-- Austria -->
          <div class="language-option" data-country="AT">
            <span class="language-option__flag">üá¶üáπ</span>
            <span class="language-option__country">√ñsterreich</span>
            <div class="language-option__languages">
              <button class="language-option__lang" data-locale="de-AT" data-country="AT">Deutsch</button>
              <button class="language-option__lang" data-locale="en-AT" data-country="AT">English</button>
            </div>
          </div>
          
          <!-- Finland -->
          <div class="language-option" data-country="FI">
            <span class="language-option__flag">üá´üáÆ</span>
            <span class="language-option__country">Finland</span>
            <div class="language-option__languages">
              <button class="language-option__lang" data-locale="fi-FI" data-country="FI">Suomi</button>
              <button class="language-option__lang" data-locale="en-FI" data-country="FI">English</button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
.language-popup {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 9999;
  display: flex;
  align-items: center;
  justify-content: center;
  opacity: 1;
  visibility: visible;
  transition: opacity 0.3s ease, visibility 0.3s ease;
}

.language-popup.hidden {
  opacity: 0;
  visibility: hidden;
}

.language-popup__overlay {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
}

.language-popup__content {
  position: relative;
  background: white;
  border-radius: 12px;
  max-width: 600px;
  width: 90%;
  max-height: 80vh;
  overflow-y: auto;
  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
}

.language-popup__header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 24px 24px 0;
}

.language-popup__title {
  font-size: 24px;
  font-weight: 600;
  margin: 0;
  color: #111;
}

.language-popup__close {
  background: none;
  border: none;
  cursor: pointer;
  padding: 8px;
  border-radius: 6px;
  color: #666;
  transition: background-color 0.2s ease;
}

.language-popup__close:hover {
  background-color: #f3f4f6;
}

.language-popup__body {
  padding: 24px;
}

.language-popup__section {
  margin-bottom: 24px;
}

.language-popup__section:last-child {
  margin-bottom: 0;
}

.language-popup__section-title {
  font-size: 16px;
  font-weight: 600;
  margin: 0 0 16px 0;
  color: #374151;
}

.language-popup__divider {
  border: none;
  height: 1px;
  background: #e5e7eb;
  margin: 24px 0;
}

.language-popup__countries {
  display: flex;
  flex-direction: column;
  gap: 12px;
}

.language-option {
  display: flex;
  align-items: center;
  padding: 16px;
  border: 1px solid #e5e7eb;
  border-radius: 8px;
  transition: border-color 0.2s ease, box-shadow 0.2s ease;
}

.language-option:hover {
  border-color: #d1d5db;
  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1);
}

.language-option__flag {
  font-size: 24px;
  margin-right: 12px;
}

.language-option__country {
  font-weight: 500;
  color: #111;
  min-width: 120px;
}

.language-option__languages {
  display: flex;
  gap: 8px;
  margin-left: auto;
}

.language-option__lang {
  background: #f3f4f6;
  border: 1px solid #d1d5db;
  border-radius: 6px;
  padding: 6px 12px;
  font-size: 14px;
  cursor: pointer;
  transition: all 0.2s ease;
  text-decoration: none;
  color: #374151;
}

.language-option__lang:hover {
  background: #e5e7eb;
  border-color: #9ca3af;
}

.language-option__lang.active {
  background: #3b82f6;
  border-color: #3b82f6;
  color: white;
}

.language-option__lang.detecting {
  background: #f59e0b;
  border-color: #f59e0b;
  color: white;
  cursor: default;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.7; }
}

@media (max-width: 768px) {
  .language-popup__content {
    width: 95%;
    margin: 20px;
  }
  
  .language-popup__header {
    padding: 20px 20px 0;
  }
  
  .language-popup__title {
    font-size: 20px;
  }
  
  .language-popup__body {
    padding: 20px;
  }
  
  .language-option {
    flex-direction: column;
    align-items: flex-start;
    gap: 12px;
  }
  
  .language-option__languages {
    margin-left: 0;
    width: 100%;
    justify-content: flex-start;
  }
}
</style>

<script>
class SmartLanguagePopup {
  constructor() {
    this.popup = document.getElementById('language-popup');
    this.overlay = this.popup?.querySelector('.language-popup__overlay');
    this.closeBtn = this.popup?.querySelector('[data-close-popup]');
    this.detectedSection = document.getElementById('detected-location');
    
    // Country URL mapping for supported countries
    this.countryUrlMap = {
      'DE': '/de',
      'FR': '/fr', 
      'AT': '/de-at',
      'FI': '/fi'
    };
    
    this.init();
  }
  
  init() {
    if (!this.popup) return;
    
    this.bindEvents();
    this.checkShouldShow();
  }
  
  bindEvents() {
    // Close popup events
    this.closeBtn?.addEventListener('click', () => this.hidePopup());
    this.overlay?.addEventListener('click', () => this.hidePopup());
    
    // Language selection events
    this.popup.addEventListener('click', (e) => {
      const langBtn = e.target.closest('[data-locale]');
      if (langBtn && !langBtn.classList.contains('detecting')) {
        this.selectLanguage(langBtn.dataset.locale, langBtn.dataset.country);
      }
    });
    
    // Escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !this.popup.classList.contains('hidden')) {
        this.hidePopup();
      }
    });
  }
  
  async checkShouldShow() {
    // ÂßãÁªàÂä†ËΩΩÂíåÊòæÁ§∫‰ΩçÁΩÆ‰ø°ÊÅØ
    await this.loadAndDisplayLocation();
    
    // Ê£ÄÊü•Áî®Êà∑ÊòØÂê¶Â∑≤ÁªèÂÅöËøáÈÄâÊã©
    const hasSelection = localStorage.getItem('language-selection-made');
    if (hasSelection) return;
    
    // Ê£ÄÊü•ÊòØÂê¶Â∫îËØ•ÊòæÁ§∫ÂºπÁ™ó
    const shouldShow = this.shouldShowPopup();
    if (shouldShow) {
      setTimeout(() => this.showPopup(), 1000);
    }
  }
  
  async loadAndDisplayLocation() {
    try {
      console.log('Loading Shopify geolocation...');
      const response = await fetch('/browsing_context_suggestions.json');
      
      if (response.ok) {
        const data = await response.json();
        console.log('Shopify API full response:', data);
        
        // Try to extract country from different possible locations in the response
        let countryCode = null;
        let countryName = null;
        
        // Check various possible response structures
        if (data.detected_values?.country) {
          countryCode = data.detected_values.country.handle || data.detected_values.country.iso_code;
          countryName = data.detected_values.country.name;
        } else if (data.country) {
          if (typeof data.country === 'string') {
            countryCode = data.country;
            countryName = data.country;
          } else {
            countryCode = data.country.handle || data.country.iso_code || data.country.code;
            countryName = data.country.name || data.country.label;
          }
        } else if (data.recommendations?.country) {
          countryCode = data.recommendations.country.handle || data.recommendations.country.iso_code;
          countryName = data.recommendations.country.name;
        }
        
        console.log('Extracted country:', { countryCode, countryName });
        
        if (countryName) {
          this.displayDetectedCountry(countryCode, countryName);
        } else {
          this.displayDetectedCountry('INT', 'International');
        }
      } else {
        console.warn('Shopify API failed with status:', response.status);
        this.displayDetectedCountry('INT', 'International');
      }
    } catch (error) {
      console.error('Error loading Shopify location:', error);
      this.displayDetectedCountry('INT', 'International');
    }
  }
  
  displayDetectedCountry(countryCode, countryName) {
    console.log('Displaying country:', countryName);
    
    const flagMap = {
      'DE': 'üá©üá™', 'FR': 'üá´üá∑', 'AT': 'üá¶üáπ', 'FI': 'üá´üáÆ',
      'GB': 'üá¨üáß', 'US': 'üá∫üá∏', 'CA': 'üá®üá¶', 'AU': 'üá¶üá∫',
      'SG': 'üá∏üá¨', 'JP': 'üáØüáµ', 'KR': 'üá∞üá∑', 'CN': 'üá®üá≥',
      'HK': 'üá≠üá∞', 'TW': 'üáπüáº', 'INT': 'üåç'
    };
    
    const countryLanguageMap = {
      'DE': [{ code: 'de-DE', name: 'Deutsch' }, { code: 'en-DE', name: 'English' }],
      'FR': [{ code: 'fr-FR', name: 'Fran√ßais' }, { code: 'en-FR', name: 'English' }],
      'AT': [{ code: 'de-AT', name: 'Deutsch' }, { code: 'en-AT', name: 'English' }],
      'FI': [{ code: 'fi-FI', name: 'Suomi' }, { code: 'en-FI', name: 'English' }]
    };
    
    const flag = flagMap[countryCode] || 'üåç';
    const supportedLanguages = countryLanguageMap[countryCode];
    
    if (supportedLanguages) {
      const languageButtons = supportedLanguages.map(lang => 
        `<button class="language-option__lang" data-locale="${lang.code}" data-country="${countryCode}">${lang.name}</button>`
      ).join('');
      
      this.detectedSection.innerHTML = `
        <div class="language-option">
          <span class="language-option__flag">${flag}</span>
          <span class="language-option__country">${countryName}</span>
          <div class="language-option__languages">
            ${languageButtons}
          </div>
        </div>
      `;
    } else {
      this.detectedSection.innerHTML = `
        <div class="language-option">
          <span class="language-option__flag">${flag}</span>
          <span class="language-option__country">${countryName}</span>
          <div class="language-option__languages">
            <button class="language-option__lang" data-locale="en-INT" data-country="INT">Visit Main Site</button>
          </div>
        </div>
      `;
    }
  }
  
  shouldShowPopup() {
    // Check if current page language matches user's preferred language
    const currentLang = document.documentElement.lang || 'en';
    const browserLang = navigator.language.split('-')[0];
    
    // Show popup if languages don't match or it's first visit
    return currentLang !== browserLang || !localStorage.getItem('language-popup-shown');
  }
  
  showPopup() {
    this.popup.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
    localStorage.setItem('language-popup-shown', 'true');
  }
  
  hidePopup() {
    this.popup.classList.add('hidden');
    document.body.style.overflow = '';
  }
  
  selectLanguage(locale, country) {
    // Store user selection
    localStorage.setItem('language-selection-made', 'true');
    localStorage.setItem('selected-locale', locale);
    localStorage.setItem('selected-country', country);
    
    // Submit localization form or redirect
    this.applyLanguageSelection(locale, country);
    
    this.hidePopup();
  }
  
  buildRelativeUrl(urlPrefix) {
    const currentPath = window.location.pathname;
    const currentSearch = window.location.search;
    
    // Remove existing language prefix from path
    const cleanPath = currentPath.replace(/^\/(de|fr|fi|de-at)/, '') || '/';
    
    // Build new URL with language prefix
    return urlPrefix + cleanPath + currentSearch;
  }
  
  applyLanguageSelection(locale, country) {
    const urlPrefix = this.countryUrlMap[country];
    
    if (urlPrefix) {
      // Redirect to country-specific URL with relative path
      const newUrl = this.buildRelativeUrl(urlPrefix);
      window.location.href = newUrl;
    } else {
      // For international users, redirect to main site
      window.location.href = '/';
    }
  }
}

// Initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => new SmartLanguagePopup());
} else {
  new SmartLanguagePopup();
}
</script>