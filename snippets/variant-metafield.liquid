{%- liquid
  assign product = product | default: all_products['default']
  assign current_variant = product.selected_or_first_available_variant
  assign metafield_namespace = block.settings.namespace
  assign metafield_key = block.settings.key
  
  assign initial_value = current_variant.metafields[metafield_namespace][metafield_key]
  if initial_value
    assign initial_value = initial_value | metafield_tag
  endif
-%}

{% capture component_id %}variant-metafield-{{ block.id | slice: -6, 6 }}{% endcapture %}

<div id="{{ component_id }}" class="variant-metafields-block" {{ block.shopify_attributes }}>
  <script type="application/json" id="{{ component_id }}-data">
    {
      {% for variant in product.variants %}
        {%- assign value = variant.metafields[metafield_namespace][metafield_key] | metafield_tag -%}
        "{{ variant.id }}": {{ value | json }}{% unless forloop.last %},{% endunless %}
      {% endfor %}
    }
  </script>

  <div id="{{ component_id }}-value" class="variant-metafield-value">
    {%- if initial_value -%}
      {{ initial_value }}
    {%- else -%}
      {{ block.settings.fallback }}
    {%- endif -%}
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const component = document.getElementById('{{ component_id }}');
  if (!component) return;
  
  const dataElement = document.getElementById('{{ component_id }}-data');
  if (!dataElement) return;
  
  let metafieldsData;
  try {
    metafieldsData = JSON.parse(dataElement.textContent);
  } catch (e) {
    console.error('Error parsing metafields data:', e);
    return;
  }
  
  const displayElement = document.getElementById('{{ component_id }}-value');
  
  function updateMetafieldForVariant(variantId) {
    if (!variantId) return;
    
    const value = metafieldsData[variantId];
    displayElement.innerHTML = value ? value : `{{ block.settings.fallback | escape }}`;
  }
  
  document.addEventListener('on:variant:change', function(event) {
    if (event.detail && event.detail.variant) {
      updateMetafieldForVariant(event.detail.variant.id);
    }
  });
  
  const variantInputObserver = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
      if (mutation.type === 'attributes' && mutation.attributeName === 'value') {
        const variantId = parseInt(mutation.target.value);
        if (!isNaN(variantId)) {
          updateMetafieldForVariant(variantId);
        }
      }
    });
  });
  
  function setupVariantPickerListeners() {
    const variantPickers = document.querySelectorAll('variant-picker');
    
    variantPickers.forEach(picker => {
      picker.addEventListener('change', function(event) {
        const form = picker.closest('form');
        const variantInput = form ? form.querySelector('input[name="id"]') : null;
        const variantId = variantInput ? parseInt(variantInput.value) : null;
        
        if (variantId) {
          updateMetafieldForVariant(variantId);
        }
      });
    });
  }
  
  function checkUrlVariant() {
    const urlParams = new URLSearchParams(window.location.search);
    const variantParam = urlParams.get('variant');
    if (variantParam) {
      const variantId = parseInt(variantParam);
      updateMetafieldForVariant(variantId);
    }
  }
  
  setupVariantPickerListeners();
  checkUrlVariant();
  
  const variantInputs = document.querySelectorAll('input[name="id"]');
  variantInputs.forEach(input => {
    variantInputObserver.observe(input, { attributes: true });
    
    if (input.value) {
      updateMetafieldForVariant(parseInt(input.value));
    }
  });
});
</script>

<style>
  #{{ component_id }} {
    display: block;
    margin-top: 20px;
    padding: 15px;
    border-radius: 4px;
    transition: opacity 0.3s ease;
  }
  
  .variant-metafield-value {
    font-size: 16px;
    line-height: 1.6;
  }
  
  .variant-metafield-value img {
    max-width: 100%;
    height: auto;
  }
</style>