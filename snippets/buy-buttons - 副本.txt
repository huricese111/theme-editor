<buy-buttons class="buy-buttons-row block" {{ block.shopify_attributes }}>
  {% form 'product', product, id: product_form_id, class: 'form js-product-form', data-product-id: product.id %}
    <input type="hidden" name="id" value="{{ current_variant.id }}" disabled>

    {% if product.available %}
      {%- liquid
  assign gift_card_recipient_feature_active = false
  if block.settings.show_gift_card_recipient and product.gift_card?
    assign gift_card_recipient_feature_active = true
  endif

  assign enable_dynamic_payment_button = false
  if block.settings.enable_payment_button and product.selling_plan_groups == empty and gift_card_recipient_feature_active == false
    unless product.template_suffix contains 'preorder'
      assign enable_dynamic_payment_button = true
    endunless
  endif
  
  assign current_locale = request.locale.iso_code
  case current_locale
    when 'de'
      assign add_text = 'Hinzufügen'
      assign remove_text = 'Entfernen'
      assign accessories_heading = block.settings.accessories_heading
    when 'fr'
      assign add_text = 'Ajouter'
      assign remove_text = 'Retirer'
      assign accessories_heading = block.settings.accessories_heading_fr
    when 'fi'
      assign add_text = 'Lisää'
      assign remove_text = 'Poista'
      assign accessories_heading = block.settings.accessories_heading_fi
    else
      assign add_text = 'Add'
      assign remove_text = 'Remove'
      assign accessories_heading = block.settings.accessories_heading_en
  endcase
  
  if accessories_heading == blank
    case current_locale
      when 'de'
        assign accessories_heading = 'Kompatibles Zubehör'
      when 'fr'
        assign accessories_heading = 'Accessoires compatibles'
      when 'fi'
        assign accessories_heading = 'Yhteensopivat lisävarusteet'
      else
        assign accessories_heading = 'Compatible accessories'
    endcase
  endif
  
  assign show_accessory_description = block.settings.show_accessory_description
-%}

      {% if gift_card_recipient_feature_active %}
        {% render 'gift-card-recipient', section: section %}
      {% endif %}

      <div class="quantity-submit-row input-row {% if enable_dynamic_payment_button %}has-spb{% endif %}">
        {% if block.settings.show_quantity_selector %}
          <label class="label" for="quantity">{{ 'products.product.quantity' | t }}</label>
          <quantity-wrapper class="quantity-wrapper">
            <a href="#" data-quantity="down" aria-label="{{ 'cart.items.decrease_quantity' | t }}">
              {%- render 'icon-minus' -%}
            </a>
            <input
              aria-label="{{ 'products.product.quantity' | t }}"
              id="quantity"
              type="number"
              name="quantity"
              value="1"
            >
            <a href="#" data-quantity="up" aria-label="{{ 'cart.items.increase_quantity' | t }}">
              {%- render 'icon-plus' -%}
            </a>
          </quantity-wrapper>
        {% endif %}

        <div class="quantity-submit-row__submit input-row">
          <div class="js-form-error lightly-spaced-row" role="alert" hidden></div>

          {%- capture add_to_cart_text -%}
            {%- if product.template_suffix contains 'preorder' -%}
              {{- 'products.product.preorder' | t -}}
            {%- else -%}
              {{- 'products.product.add_to_cart' | t -}}
            {%- endif -%}
          {%- endcapture -%}
          
         <div class="compatible-accessories-section" style="margin-bottom: 20px;">
            {% if accessories_heading != blank %}
              <h3 class="accessories-heading" style="font-size: 1.2rem; margin-bottom: 15px; font-weight: bold;">
                {{ accessories_heading }}
              </h3>
            {% endif %}
            
            <div class="accessory-list" style="display: flex; flex-direction: column; gap: 15px;">
              {%- for accessory_product in block.settings.accessory_products -%}
                {%- if accessory_product != blank -%}
                  <div class="accessory-item" style="display: flex; align-items: center; padding: 15px; background: #f9f9f9; border-radius: 8px; border: 1px solid #eee;">
                    <div class="accessory-image" style="width: 70px; margin-right: 15px; flex-shrink: 0;">
                      {%- if accessory_product.featured_media -%}
                        <a href="{{ accessory_product.url }}" aria-label="{{ accessory_product.title }}" target="_blank" alt="{{ accessory_product.title }}" >
                          {{ accessory_product.featured_media | image_url: width: 140 | image_tag: 
                            loading: 'lazy', 
                            alt: accessory_product.title,
                            style: 'max-width: 70px; height: auto; object-fit: contain;'
                          }}
                        </a>
                      {%- endif -%}
                    </div>
                    <div style="flex: 1; min-width: 0;">
                      <div class="accessory-title" style="font-weight: 500; margin-bottom: 5px; font-size: 1rem;">
                        <a href="{{ accessory_product.url }}" style="color: inherit; text-decoration: none; font-weight: 500;">
                          {{ accessory_product.title }}
                        </a>
                      </div>
                      {% if show_accessory_description %}
                        <div class="accessory-description" style="font-size: 0.85rem; color: #666; margin: 5px 0; line-height: 1.4; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden;">
                          {{ accessory_product.description | strip_html | truncate: 100 }}
                        </div>
                      {% endif %}
                      <div class="accessory-price" style="font-weight: 500; font-size: 0.95rem;">
                        {% if accessory_product.compare_at_price > accessory_product.price %}
                          <span style="color: #d00;">{{ accessory_product.price | money }}</span>
                          <span style="text-decoration: line-through; font-size: 0.9em; color: #999; margin-left: 8px;">{{ accessory_product.compare_at_price | money }}</span>
                        {% else %}
                          {{ accessory_product.price | money }}
                        {% endif %}
                      </div>
                    </div>
                    <button 
                      type="button"
                      class="accessory-toggle-btn" 
                      data-accessory-id="accessory-{{ forloop.index }}" 
                      data-variant-id="{{ accessory_product.selected_or_first_available_variant.id }}"
                      data-add-text="{{ add_text }}"
                      data-remove-text="{{ remove_text }}"
                      >
                      {{ add_text }}
                    </button>
                  </div>
                {%- endif -%}
              {%- endfor -%}
            </div>
          </div>
          
          <button
            class="btn btn--large add-to-cart"
            type="submit"
            name="add"
            data-add-to-cart-text="{{ add_to_cart_text | escape }}"
            {% if product.available == false %}
              disabled
            {% endif %}
          >
            {%- if current_variant.available or current_variant == false -%}
              {{- add_to_cart_text -}}
            {%- else -%}
              {{- 'products.variant.no_stock' | t -}}
            {%- endif -%}
          </button>

          <div class="product-stock-notification" style="display: none;">
            <button type="button" class="button button--primary" id="notify-me-trigger">
              Notify me
              </button>
              </div>
          
        </div>
        {% if enable_dynamic_payment_button %}
          <div class="product-dynamic-payment-button">
            <script class="dynamic-payment-button-template" type="text/template">
              {{ form | payment_button }}
            </script>
          </div>
        {% endif %}

        {% if block.settings.show_backorder_text %}
          {% render 'backorder', product: product, variant: current_variant %}
        {% endif %}
      </div>

    {% else %}
      <div class="quantity-submit-row input-row">
        <div class="quantity-submit-row__submit">
          <button class="btn btn--large" name="add" type="submit" disabled>
            {{- 'products.variant.no_stock' | t -}}
          </button>
        </div>
      </div>
    {% endif %}
    
  {% endform %}

  {%- if product.available and block.settings.show_pickup_availability -%}
    {% render 'pickup-availability', current_variant: current_variant %}
  {%- endif -%}
</buy-buttons>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const accessoryButtons = document.querySelectorAll('.accessory-toggle-btn');
  let selectedAccessories = [];
  
  function getButtonState(button) {
    return {
      variantId: button.dataset.variantId,
      addText: button.dataset.addText,
      removeText: button.dataset.removeText,
      isAdded: button.classList.contains('remove')
    };
  }
  
  function isAccessoryInCart(variantId) {
    const cartItems = JSON.parse(localStorage.getItem('cart-items') || '[]');
    return cartItems.some(item => 
      item.id == variantId && 
      item.properties?.Accessory === 'true'
    );
  }
  
  function updateButtonState(button) {
    const inCart = isAccessoryInCart(button.dataset.variantId);
    
    if (inCart) {
      button.textContent = button.dataset.removeText;
      button.classList.add('remove');
      button.classList.remove('loading');
    } else {
      button.textContent = button.dataset.addText;
      button.classList.remove('remove', 'loading');
    }
  }
  
  function updateAllAccessoryButtons() {
    accessoryButtons.forEach(updateButtonState);
  }
  
  function fetchCartAndUpdate() {
    fetch('/cart.js')
      .then(res => res.json())
      .then(cart => {
        localStorage.setItem('cart-items', JSON.stringify(cart.items));
        updateAllAccessoryButtons();
      })
      .catch(error => {
        console.error('Error fetching cart:', error);
      });
  }
  
  function setupCartListeners() {
    document.addEventListener('cart:updated', fetchCartAndUpdate);
    document.addEventListener('cart:refresh', fetchCartAndUpdate);
    
    document.addEventListener('cart:requestShow', function() {
      setTimeout(fetchCartAndUpdate, 500); 
    });
    
    setInterval(fetchCartAndUpdate, 3000);
  }
  
  accessoryButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      e.preventDefault();
      
      const originalState = this.classList.contains('remove');
      this.classList.add('loading');
      this.disabled = true;
      
      const variantId = this.dataset.variantId;
      
      if (originalState) {
        fetch('/cart.js')
          .then(res => res.json())
          .then(cart => {
            const itemToRemove = cart.items.find(item => 
              item.id == variantId && 
              item.properties?.Accessory === 'true'
            );
            
            if (itemToRemove) {
              fetch('/cart/change.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                  id: itemToRemove.key,
                  quantity: 0
                })
              })
              .then(() => {
                fetchCartAndUpdate();
                showNotification('{{ remove_text }}', 'success');
              })
              .catch(error => {
                console.error('Error removing accessory:', error);
                showNotification('{{ "cart.general.error" | t }}', 'error');
              })
              .finally(() => {
                this.classList.remove('loading');
                this.disabled = false;
              });
            }
          });
      } else {
        const formData = new FormData();
        formData.append('id', variantId);
        formData.append('quantity', 1);
        formData.append('properties[Accessory]', 'true');
        
        fetch('/cart/add.js', {
          method: 'POST',
          body: formData
        })
        .then(response => response.json())
        .then(() => {
          fetchCartAndUpdate();
          showNotification('{{ add_to_cart_text | escape }}', 'success');
        })
        .catch(error => {
          console.error('Error adding accessory:', error);
          showNotification('{{ "cart.general.error" | t }}', 'error');
        })
        .finally(() => {
          this.classList.remove('loading');
          this.disabled = false;
        });
      }
    });
  });

  document.querySelector('.js-product-form')?.addEventListener('submit', function(e) {
    e.preventDefault();
    
    const form = e.target;
    const mainProductId = '{{ current_variant.id }}';
    const quantity = form.querySelector('[name="quantity"]') ? 
                    parseInt(form.querySelector('[name="quantity"]').value) : 1;
    
    const items = [{
      id: mainProductId,
      quantity: quantity
    }];
    
    fetch('/cart/add.js', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      },
      body: JSON.stringify({ items: items })
    })
    .then(response => response.json())
    .then(() => {
      fetchCartAndUpdate();
      
      showNotification('{{ add_to_cart_text | escape }}', 'success');
      
      document.dispatchEvent(new CustomEvent('cart:requestShow'));
    })
    .catch(error => {
      console.error('Error adding main product:', error);
      showNotification('{{ "cart.general.error" | t }}', 'error');
    });
  });
  
  function showNotification(message, type = 'success') {
    if (typeof theme !== 'undefined' && typeof theme.Notify !== 'undefined') {
      theme.Notify.open(type, message);
      return;
    }
    
    const notification = document.createElement('div');
    notification.className = `cart-notification ${type === 'error' ? 'error' : ''}`;
    notification.innerHTML = `
      <div class="notification-icon">${type === 'success' ? '✓' : '✕'}</div>
      <div class="notification-message">${message}</div>
    `;
    
    document.body.appendChild(notification);
    
    setTimeout(() => {
      notification.classList.add('show');
    }, 10);
    
    setTimeout(() => {
      notification.classList.remove('show');
      setTimeout(() => {
        notification.remove();
      }, 300);
    }, 3000);
  }
  
  fetchCartAndUpdate();
  setupCartListeners();
});
</script>

<style>
<style>
.compatible-accessories-section {
  margin-bottom: 20px;
}

.accessories-heading {
  font-size: 1.2rem;
  margin-bottom: 15px;
  font-weight: bold;
}

.accessory-list {
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.accessory-item {
  display: flex;
  align-items: center;
  padding: 15px;
  background: #f9f9f9;
  border-radius: 8px;
  border: 1px solid #eee;
}

.accessory-image {
  width: 70px;
  margin-right: 15px;
  flex-shrink: 0;
}

.accessory-image img {
  max-width: 70px;
  height: auto;
  object-fit: contain;
}

.accessory-title {
  font-weight: 500;
  margin-bottom: 5px;
  font-size: 1rem;
}

.accessory-price {
  font-weight: 500;
  font-size: 0.95rem;
}

.accessory-price span {
  color: #bf3737;
}

.accessory-toggle-btn {
  background: #000; 
  color: #fff;      
  border: 1px solid #000;
  padding: 8px 15px; 
  border-radius: 4px; 
  cursor: pointer; 
  min-width: 100px; 
  font-size: 0.95rem; 
  white-space: nowrap; 
  transition: all 0.2s ease; 
  flex-shrink: 0; 
  font-weight: 500;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  vertical-align: middle;
  position: relative;
  overflow: hidden;
  line-height: 1.4;
}

.accessory-toggle-btn.remove {
  background: #fff; 
  color: #000;    
  border: 1px solid #000;
}

.accessory-toggle-btn:not(.remove):hover {
  background: #333; 
}

.accessory-toggle-btn.remove:hover {
  background: #f5f5f5;
}

.accessory-toggle-btn.loading {
  position: relative;
  color: transparent !important;
  pointer-events: none;
}

.accessory-toggle-btn.loading::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 18px;
  height: 18px;
  margin: -9px 0 0 -9px;
  border: 2px solid;
  border-radius: 50%;
  border-top-color: transparent;
  animation: spin 0.8s linear infinite;
}

.accessory-toggle-btn:not(.remove).loading::after {
  border-color: #fff;
  border-top-color: transparent;
}

.accessory-toggle-btn.remove.loading::after {
  border-color: #000;
  border-top-color: transparent;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

.cart-notification {
  position: fixed;
  bottom: 20px;
  right: 20px;
  padding: 15px 25px;
  background: #000;
  color: white;
  border-radius: 4px;
  z-index: 1000;
  box-shadow: 0 4px 12px rgba(0,0,0,0.15);
  transition: opacity 0.5s;
  font-weight: 500;
  display: flex; 
  align-items: center; 
}

.cart-notification .notification-message {
  white-space: nowrap;
}
</style>