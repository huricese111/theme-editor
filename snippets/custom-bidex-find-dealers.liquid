<button class="find-a-bidex-dealer-btn btn btn--large" style="display: none">
    {{ 'products.product.check_dealer_inventory' | t }}
</button>

<link rel="stylesheet" href="https://cdn.rawgit.com/jlong/css-spinners/master/css/spinners.css">
<script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js"></script>
<script src="https://2.local.bidex.bike/Scripts/iframeResizer.min.js"></script>
<script id="find-a-bidex-dealer-inline-js-xg23sdg5">
    (function () {
        const backendData = {
            hephaB2cApiHttpHost: "https://shopify-api.hepha.com",
            bidexBchID: "44",
            selectedVariant: {
                id: {{ product.selected_or_first_available_variant.id | json | default: "null" }},
                barcode: {{ product.selected_or_first_available_variant.barcode | json | default: "null" }}
            },
            test: {% if product.id == 11534543913228 %}true{% else %}false{% endif %},
        }

        class CheckSkuIsInStockInNearbyBidexShopsHephaApiClient {
            _hephaB2cApiHttpHost;
            _isTest;

            constructor(hephaB2cApiHttpHost, isTest) {
                this._hephaB2cApiHttpHost = hephaB2cApiHttpHost;
                this._isTest = isTest;
            }

            async isAvailable(gtin) {
                const searchParams = new URLSearchParams({gtin: gtin});
                const response = await fetch(this._hephaB2cApiHttpHost + "/api/online_store/inventory/bidex/is_in_stock_in_nearby_shops?" + searchParams.toString());
                const responseData = await response.json();
                if (this._isTest) {
                    return true;
                } else {
                    return !!responseData.available;
                }
            }
        }

        class GetVisitorGeoLocationInfoHephaApiClient {
            _hephaB2cApiHttpHost;
            _isTest;

            constructor(hephaB2cApiHttpHost, isTest) {
                this._hephaB2cApiHttpHost = hephaB2cApiHttpHost;
                this._isTest = isTest;
            }

            /**
             * @returns {Promise<{countryCode:string, zipCode: string}>}
             */
            async getInfo() {
                const response = await fetch(this._hephaB2cApiHttpHost + "/api/online_store/visitors/me/ip_geo_location");
                if (response.status === 200) {
                    const responseData = await response.json();
                    if (responseData.ip === '127.0.0.1' || this._isTest) { // for test purpose
                        return {
                            ip: responseData.ip,
                            zipCode: '85391',
                            countryCode: 'DE'
                        }
                    } else {
                        return responseData;
                    }
                } else {
                    const responseBodyAsText = await response.text();
                    throw Error("failed to get visitor geo location info, status = " + response.status + ", response body = " + responseBodyAsText);
                }
            }
        }

        class HephaCustomDialog {
            /**
             * @private {HTMLElement}
             */
            _thisElement;
            _options;
            _originalOverflowYOfBody;

            constructor(selector, options) {
                this._thisElement = document.querySelector(selector);
                this._options = options;
            }

            init(options) {
                this._thisElement.style.flexDirection = "column";
                this._thisElement.style.width = "100%";
                this._thisElement.style.height = "100vh";
                this._thisElement.style.position = "fixed";
                this._thisElement.style.zIndex = "9999";
                this._thisElement.style.top = "0";
                this._thisElement.style.background = "rgba(0,0,0,0.5)";
                const classNameOfMainContentWrapper = 'hepha-custom-dialog-main-content-wrapper-2d3365cg';
                const classNameOfCloseButton = 'hepha-close-button-35fg3425';
                this._thisElement.insertAdjacentHTML('afterbegin', `
                  <div style='display:flex; flex-direction: row; justify-content: end; background-color: #eee;'>
                    <div class="${classNameOfCloseButton}" style="width: fit-content; padding: 0 0.5rem; font-size: 2rem; cursor: pointer;">&times;</div>
                  </div>
                  <div class="${classNameOfMainContentWrapper}" style="overflow-y: auto;">
                  ${options && options.mainContentHtml ? options.mainContentHtml : ''}
                  </div>
            `);
                this._thisElement.querySelector(`.${classNameOfCloseButton}`).addEventListener('click', e => this.close());
                options.afterInit?.();
            }

            close() {
                document.body.style.overflowY = this._originalOverflowYOfBody;

                this._thisElement.style.display = 'none';
                this._thisElement.replaceChildren();
            }

            open() {
                this._originalOverflowYOfBody = document.body.style.overflowY;
                document.body.style.overflowY = 'hidden';

                this._thisElement.style.display = 'flex';
                this.init(this._options);
            }
        }

        document.addEventListener('DOMContentLoaded', async () => {
            const idOfLocalBidexBikeDialogWrapperElement = 'localBidexBike-dialog';
            const localBidexBikeDialogWrapperEl = document.createElement("div");
            localBidexBikeDialogWrapperEl.id = idOfLocalBidexBikeDialogWrapperElement;
            document.body.appendChild(localBidexBikeDialogWrapperEl);

            let currentVariant = backendData.selectedVariant;
            const findADealerButtons = document.querySelectorAll('.find-a-bidex-dealer-btn');

            const geoLocationInfo = await new GetVisitorGeoLocationInfoHephaApiClient(backendData.hephaB2cApiHttpHost, backendData.test).getInfo();
            const hephaCustomDialog = new HephaCustomDialog('#' + idOfLocalBidexBikeDialogWrapperElement, {
                mainContentHtml: `
                    <div id="localBidexBike">
                        <div style="top: 30%; position: absolute; left: 50%;"></div>
                    </div>
                `,
                afterInit: () => {
                    const urlSearchParams = new URLSearchParams({
                        bchID: backendData.bidexBchID,
                        showFilter: "true",
                        Plz: geoLocationInfo.zipCode,
                        Country: geoLocationInfo.countryCode,
                        gtin: currentVariant.barcode
                    });
                    const iframeContainer = document.querySelector("#localBidexBike");
                    const loadingSpinnerEl = iframeContainer.firstElementChild;
                    loadingSpinnerEl.classList.add('spinner-loader');

                    const bidexIframe = document.createElement('iframe');
                    bidexIframe.addEventListener('load', () => loadingSpinnerEl.classList.remove('spinner-loader'));
                    bidexIframe.style.width = '100%';
                    bidexIframe.style.border = 'none';
                    bidexIframe.src = "https://2.local.bidex.bike/Shops/?" + urlSearchParams.toString();
                    iframeContainer.appendChild(bidexIframe);

                    iFrameResize({
                        checkOrigin: false,
                        autoResize: 'true',
                        heightCalculationMethod: 'lowestElement',
                        messageCallback: function (iframe) {
                            if (iframe.message == "ScrollToTop") {
                                const offset = $('#localBidexBike').offset();
                                window.scrollTo(offset.left, offset.top);
                            }
                        }
                    });
                }
            });
            findADealerButtons.forEach(el => el.addEventListener('click', () => hephaCustomDialog.open()));

            const renderFindADealerButtonAccordingToSelectedProductVariant = async (currentVariant, findADealerButtons) => {
                const isAvailableInNearbyShop =
                    (!!currentVariant.barcode && currentVariant.barcode !== '')
                    && await new CheckSkuIsInStockInNearbyBidexShopsHephaApiClient(backendData.hephaB2cApiHttpHost, backendData.test).isAvailable(currentVariant.barcode);

                findADealerButtons.forEach(el => {
                    el.style.display = isAvailableInNearbyShop ? 'inline-block' : 'none';
                });
            };

            document.addEventListener('on:variant:change', async (event) => {
                currentVariant = {
                    id: event.detail.variant.id,
                    barcode: event.detail.variant.barcode
                };
                await renderFindADealerButtonAccordingToSelectedProductVariant(currentVariant, findADealerButtons);
            });
            await renderFindADealerButtonAccordingToSelectedProductVariant(currentVariant, findADealerButtons);
        });
    })();
</script>