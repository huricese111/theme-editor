<style>
  :root {
    --feedback-primary-color: #000;
    --feedback-text-color: #fff;
    --feedback-modal-bg: rgba(0, 0, 0, 0.5);
    --feedback-border-radius: 5px;
    --feedback-z-index-button: 100;
    --feedback-z-index-modal: 9999;
    --feedback-z-index-success: 10000;
    --feedback-transition: all 0.3s ease;
  }

  .feedback-button-black {
    position: fixed;
    left: 20px;
    bottom: 20px;
    background-color: var(--feedback-primary-color);
    color: var(--feedback-text-color);
    border: none;
    padding: 4px 13px;
    cursor: pointer;
    border-radius: 60px;
    z-index: var(--feedback-z-index-button);
    width: 50px;
    height: 50px;
    min-width: 44px;
    min-height: 44px;
    touch-action: manipulation;
    transition: var(--feedback-transition);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .feedback-button-black:hover {
    transform: scale(1.1);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .feedback-button-black:focus {
    outline: 2px solid #fff;
    outline-offset: 2px;
  }

  .modal-feedback {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: var(--feedback-modal-bg);
    justify-content: center;
    align-items: center;
    z-index: var(--feedback-z-index-modal);
    opacity: 0;
    transition: opacity 0.3s ease;
    padding: 20px;
    box-sizing: border-box;
  }

  .modal-content-feedback {
    background-color: white;
    padding: 20px;
    border-radius: var(--feedback-border-radius);
    width: 540px;
    max-width: 90vw;
    text-align: left;
    position: relative;
    transform: translateY(-20px);
    transition: transform 0.3s ease;
    display: flex;
    flex-direction: column;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    height: auto;
    min-height: 200px;
    max-height: 90vh;
    overflow: hidden;
  }

  .pifyform {
    margin: 0;
    flex: 1;
    display: flex;
    flex-direction: column;
    min-height: 300px;
  }

  .pifyform iframe {
    width: 100% !important;
    border: none !important;
    display: block;
    height: 400px;
    min-height: 300px;
  }

  /* 移动端适配 */
  @media (max-width: 768px) {
    .feedback-button-black {
      bottom: 10px;
      left: 10px;
      width: 45px;
      height: 45px;
    }
    
    .modal-feedback {
      padding: 10px;
    }
    
    .modal-content-feedback {
      width: calc(100vw - 20px);
      padding: 0;
      max-height: 85vh;
    }
  }

  @media (max-width: 480px) {
    .modal-feedback {
      padding: 5px;
    }
    
    .modal-content-feedback {
      width: calc(100vw - 10px);
      padding: 0;
      max-height: 80vh;
    }
    
    .close-button {
      top: 5px;
      right: 5px;
      font-size: 20px;
    }
  }

  .modal-feedback.show {
    opacity: 1;
  }

  .modal-feedback.show .modal-content-feedback {
    transform: translateY(0);
  }

  .modal-content-feedback p {
    font-weight: bold;
    font-size: 18px;
    margin: 0 0 10px 0;
  }

  .modal-content-feedback .selecting {
    font-size: 30px;
  }

  .close-button {
    cursor: pointer;
    color: var(--feedback-primary-color);
    position: absolute;
    top: 10px;
    right: 10px;
    font-size: 24px;
    padding: 5px;
    min-width: 44px;
    min-height: 44px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: var(--feedback-transition);
    z-index: 1;
  }

  .close-button:hover {
    background-color: #f0f0f0;
  }

  .close-button:focus {
    outline: 2px solid var(--feedback-primary-color);
    outline-offset: 2px;
  }

  .success-message {
    display: none;
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background-color: white;
    padding: 20px;
    border-radius: var(--feedback-border-radius);
    text-align: center;
    z-index: var(--feedback-z-index-success);
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  .success-message button {
    background-color: var(--feedback-primary-color);
    color: var(--feedback-text-color);
    border: none;
    padding: 10px 20px;
    border-radius: var(--feedback-border-radius);
    cursor: pointer;
    transition: var(--feedback-transition);
  }

  .success-message button:hover {
    background-color: #333;
  }

  .feedback-error {
    background-color: #fee;
    color: #c33;
    padding: 10px;
    border-radius: var(--feedback-border-radius);
    margin: 10px 0;
    border: 1px solid #fcc;
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  .pifyform.formloading iframe {
    visibility: hidden !important;
  }
  
  .pifyform.formloading {
    background-image: url(https://form-builder.pifyapp.com/assets/images/loading.gif?v=4.6);
    background-position: center 30px;
    background-size: 30px 30px;
    background-repeat: no-repeat;
    min-height: 100px;
  }

  @media (prefers-reduced-motion: reduce) {
    .feedback-button-black,
    .modal-feedback,
    .modal-content-feedback,
    .close-button,
    .success-message button {
      transition: none;
    }
  }
</style>

<button class="feedback-button-black" 
        onclick="FeedbackModal.open()" 
        aria-label="Open feedback form"
        role="button"
        tabindex="0">
  <svg
    t="1750229384481"
    class="icon"
    viewBox="0 0 1024 1024"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    p-id="26690"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    width="200"
    height="200"
    aria-hidden="true">
     <path d="M512 42.666667C252.8 42.666667 42.666667 252.8 42.666667 512c0 113.578667 40.362667 217.770667 107.52 298.922667L55.466667 981.333333H512c259.2 0 469.333333-210.133333 469.333333-469.333333S771.2 42.666667 512 42.666667zM355.541333 580.266667a170.709333 170.709333 0 0 0 312.96 0l17.066667-39.125334 78.208 34.176-17.066667 39.082667a256.042667 256.042667 0 0 1-469.376 0l-17.066666-39.082667 78.165333-34.133333 17.066667 39.082667z" p-id="26691" fill="#ffffff"></path>
    <circle cx="400" cy="400" r="40" fill="#000000" />
     <circle cx="624" cy="400" r="40" fill="#000000" />
  </svg>
</button>

<div class="modal-feedback" 
     id="feedbackModal" 
     role="dialog" 
     aria-modal="true" 
     aria-labelledby="feedback-title">
  <div class="modal-content-feedback">
    <h2 id="feedback-title" class="sr-only">User Feedback Form</h2>
    <span class="close-button" 
          onclick="FeedbackModal.close()" 
          aria-label="Close feedback form"
          role="button"
          tabindex="0">&times;</span>

    <div id="feedback-form-container">
      {% if request.locale.iso_code == 'de' %}
        <div id="pifyform-11904" class="pifyform"></div>
      {% elsif request.locale.iso_code == 'fr' %}
        <div id="pifyform-11905" class="pifyform"></div>
      {% elsif request.locale.iso_code == 'fi' %}
        <div id="pifyform-11906" class="pifyform"></div>
      {% else %}
        <div id="pifyform-11903" class="pifyform"></div>
      {% endif %}
    </div>
  </div>
</div>

<div class="success-message" id="successMessage">
  <p>Thank you for your feedback!</p>
  <button onclick="FeedbackModal.closeSuccess()">Close</button>
</div>

<script>
  const FeedbackModal = {
    config: {
      formIds: {
        'de': '11904',
        'fr': '11905',
        'fi': '11906',
        'default': '11903'
      },
      selectors: {
        modal: '#feedbackModal',
        modalContent: '.modal-content-feedback',
        button: '.feedback-button-black',
        closeBtn: '.close-button',
        successMsg: '#successMessage',
        formContainer: '#feedback-form-container'
      },
      loadTimeout: 10000,
      modalPadding: 40 // modal高度 = iframe高度 + 40px
    },
    
    formLoaded: false,
    currentLocale: '{{ request.locale.iso_code }}',
    resizeObserver: null,
    
    init() {
      this.bindEvents();
      this.setupKeyboardNavigation();
      this.setupResizeObserver();
    },
    
    setupResizeObserver() {
      if ('ResizeObserver' in window) {
        this.resizeObserver = new ResizeObserver((entries) => {
          this.debounce(() => {
            this.adjustModalHeight();
          }, 100)();
        });
      }
    },
    
    adjustModalHeight() {
      const modalContent = document.querySelector(this.config.selectors.modalContent);
      const pifyform = document.querySelector('.pifyform');
      const iframe = pifyform ? pifyform.querySelector('iframe') : null;
      
      if (!modalContent || !iframe) return;
      
      try {
        const isMobile = window.innerWidth <= 768;
        const viewportHeight = window.innerHeight;
        
        // 移动端使用更小的padding
        const modalPadding = isMobile ? 20 : 40; // 移动端减少padding
        
        let iframeContentHeight = 400;
        
        try {
          const iframeDoc = iframe.contentDocument || iframe.contentWindow.document;
          if (iframeDoc && iframeDoc.body) {
            const bodyHeight = iframeDoc.body.scrollHeight;
            const htmlHeight = iframeDoc.documentElement.scrollHeight;
            iframeContentHeight = Math.max(bodyHeight, htmlHeight, isMobile ? 280 : 300);
          }
        } catch (e) {
          iframeContentHeight = iframe.offsetHeight || (isMobile ? 350 : 400);
        }
        
        iframe.style.height = iframeContentHeight + 'px';
        
        const finalModalHeight = iframeContentHeight + modalPadding;
        const maxHeight = viewportHeight * (isMobile ? 0.8 : 0.9); // 移动端降低最大高度比例
        
        if (finalModalHeight <= maxHeight) {
          modalContent.style.height = finalModalHeight + 'px';
          modalContent.style.overflowY = 'hidden';
        } else {
          modalContent.style.height = maxHeight + 'px';
          modalContent.style.overflowY = 'auto';
          
          const availableHeight = maxHeight - modalPadding;
          iframe.style.height = Math.max(isMobile ? 250 : 300, availableHeight) + 'px';
        }
        
      } catch (error) {
        console.error('Error adjusting modal height:', error);
        modalContent.style.height = isMobile ? '400px' : '500px';
        if (iframe) {
          iframe.style.height = isMobile ? '360px' : '460px';
        }
      }
    },
    
    bindEvents() {
      const modal = document.querySelector(this.config.selectors.modal);
      if (modal) {
        modal.addEventListener('click', (e) => {
          if (e.target === modal) {
            this.close();
          }
        });
      }
      
      window.addEventListener('resize', this.debounce(() => {
        this.adjustModalHeight();
      }, 250));
    },
    
    setupKeyboardNavigation() {
      document.addEventListener('keydown', (e) => {
        if (e.key === 'Escape') {
          const modal = document.querySelector(this.config.selectors.modal);
          if (modal && modal.style.display === 'flex') {
            this.close();
          }
        }
      });
    },
    
    debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func.apply(this, args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    },
    
    open() {
      const modal = document.querySelector(this.config.selectors.modal);
      if (!modal) return;
      
      modal.style.display = 'flex';
      
      setTimeout(() => {
        modal.classList.add('show');
      }, 10);
      
      const closeBtn = document.querySelector(this.config.selectors.closeBtn);
      if (closeBtn) {
        closeBtn.focus();
      }
      
      if (!this.formLoaded) {
        this.loadFeedbackForm();
        this.formLoaded = true;
      } else {
        // 如果表单已加载，直接调整高度
        setTimeout(() => {
          this.adjustModalHeight();
        }, 100);
      }
    },
    
    close() {
      const modal = document.querySelector(this.config.selectors.modal);
      if (!modal) return;
      
      modal.classList.remove('show');
      
      setTimeout(() => {
        modal.style.display = 'none';
      }, 300);
    },
    
    closeSuccess() {
      const successMsg = document.querySelector(this.config.selectors.successMsg);
      if (successMsg) {
        successMsg.style.display = 'none';
      }
    },
    
    getFormId() {
      return this.config.formIds[this.currentLocale] || this.config.formIds.default;
    },
    
    loadFeedbackForm() {
      try {
        const formId = this.getFormId();
        const containerId = `pifyform-${formId}`;
        const container = document.getElementById(containerId);
        
        if (!container) {
          console.error('Form container not found');
          return;
        }
        
        container.classList.add('formloading');
        
        this.createFormIframe(formId, container);
        
      } catch (error) {
        console.error('Form loading error:', error);
      }
    },
    
    createFormIframe(formId, container) {
      const iframe = document.createElement('iframe');
      const iframeId = `form-iframe-${formId}`;
      
      iframe.src = `https://form-builder-an.pifyapp.com/form/s/${formId}`;
      iframe.id = iframeId;
      iframe.frameBorder = 0;
      iframe.scrolling = 'no';
      iframe.style.cssText = `
        display: block;
        width: 100%;
        border: none;
        overflow: hidden;
        height: 400px;
      `;
      
      iframe.onload = () => {
        container.classList.remove('formloading');
        
        // 表单加载完成后调整高度
        setTimeout(() => {
          this.adjustModalHeight();
          
          // 开始监听iframe尺寸变化
          if (this.resizeObserver) {
            this.resizeObserver.observe(iframe);
          }
        }, 500);
      };
      
      this.setupMessageListener(container, iframe, formId);
      
      container.appendChild(iframe);
    },
    
    setupMessageListener(container, iframe, formId) {
      const messageHandler = (event) => {
        if (event.data && typeof event.data === 'string') {
          let data = null;
          try {
            data = JSON.parse(event.data);
          } catch (e) {
            return;
          }
          
          // 处理来自iframe的高度信息
          if (data && data.height !== undefined) {
            if (data.formId === undefined || `pifyform-${data.formId}` === container.id) {
              iframe.style.height = data.height + 'px';
              // 收到高度信息后立即调整modal高度
              setTimeout(() => {
                this.adjustModalHeight();
              }, 50);
            }
          }
        }
      };
      
      window.addEventListener('message', messageHandler);
    }
  };
  
  // 初始化
  document.addEventListener('DOMContentLoaded', () => {
    FeedbackModal.init();
  });
  
  // 如果DOM已经加载完成
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      FeedbackModal.init();
    });
  } else {
    FeedbackModal.init();
  }
</script>