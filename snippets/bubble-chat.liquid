<!-- Hepha.com Experience Feedback Form -->
<style>
  .feedback-button {
    position: fixed;
    bottom: 20px;
    left: 20px;
    width: 60px;
    height: 60px;
    background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
    border: none;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 4px 20px rgba(45, 55, 72, 0.4);
    transition: all 0.3s ease;
    z-index: 1000;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .feedback-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(45, 55, 72, 0.6);
    background: linear-gradient(135deg, #1a202c 0%, #171923 100%);
  }

  .feedback-button svg {
    width: 24px;
    height: 24px;
    fill: white;
  }

  .feedback-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: none;
    align-items: center;
    justify-content: center;
    z-index: 10000;
    padding: 20px;
    box-sizing: border-box;
  }

  .feedback-modal.show {
    display: flex;
  }

  .feedback-content {
    background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
    border-radius: 20px;
    width: 100%;
    max-width: 500px;
    max-height: 90vh;
    overflow-y: auto;
    position: relative;
    box-shadow: 0 20px 60px rgba(0, 0, 0, 0.2);
    border: 1px solid #e2e8f0;
  }

  .feedback-header {
    padding: 24px 24px 16px;
    border-bottom: 1px solid #e5e7eb;
    position: relative;
  }

  .feedback-title {
    font-size: 20px;
    font-weight: 700;
    color: #1e293b;
    margin: 0;
    padding-right: 40px;
  }

  .feedback-subtitle {
    font-size: 14px;
    color: #64748b;
    margin: 4px 0 0;
    line-height: 1.6;
  }

  .feedback-close {
    position: absolute;
    top: 20px;
    right: 20px;
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
    color: #9ca3af;
    padding: 4px;
    line-height: 1;
  }

  .feedback-close:hover {
    color: #374151;
  }

  .feedback-body {
    padding: 24px;
  }

  /* Q1: Overall Experience Rating */
  .rating-section {
    margin-bottom: 24px;
  }

  .rating-label {
    display: block;
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.5rem;
    font-size: 1rem;
    text-transform: capitalize;
  }

  .rating-stars {
    display: flex;
    gap: 8px;
    margin-bottom: 8px;
    justify-content: center;
    padding: 1rem;
    background: #ffffff;
    border-radius: 12px;
    border: 2px solid #e2e8f0;
  }

  .rating-star {
    width: 40px;
    height: 40px;
    cursor: pointer;
    transition: all 0.3s ease;
    border: none;
    background: none;
    padding: 0;
  }

  .rating-star:hover,
  .rating-star.selected {
    transform: scale(1.1);
  }

  .rating-star svg {
    width: 100%;
    height: 100%;
    fill: #d1d5db;
    transition: fill 0.3s ease;
  }

  .rating-star.selected svg,
  .rating-star:hover svg {
    fill: #fbbf24;
  }

  .rating-labels {
    display: flex;
    justify-content: space-between;
    font-size: 12px;
    color: #64748b;
    margin-top: 4px;
  }

  /* Q2: Problem Report Panel */
  .problem-report {
    display: none;
    margin-top: 24px;
    padding: 20px;
    background: #f0f8ff;
    border-radius: 12px;
    border-left: 4px solid #3b82f6;
  }

  .problem-report.show {
    display: block;
    animation: slideDown 0.3s ease;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .problem-title {
    font-size: 16px;
    font-weight: 700;
    color: #000000;
    margin: 0 0 16px;
    text-transform: capitalize;
  }

  .issue-types {
    display: grid;
    gap: 8px;
    margin-bottom: 20px;
  }

  .issue-type {
    display: flex;
    align-items: center;
    padding: 0.75rem;
    background: #ffffff;
    border: 2px solid #e2e8f0;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
    font-weight: 500;
    color: #374151;
  }

  .issue-type:hover {
    border-color: #3b82f6;
    background: #f8fafc;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .issue-type.selected {
    border-color: #3b82f6;
    background: #eff6ff;
  }

  .issue-type input[type="radio"] {
    width: 18px;
    height: 18px;
    accent-color: #3b82f6;
    margin-right: 0.75rem;
    appearance: none;
    border: 2px solid #d1d5db;
    background: white;
    border-radius: 50%;
    position: relative;
    transition: all 0.3s ease;
  }

  .issue-type input[type="radio"]:checked {
    background: #3b82f6;
    border-color: #3b82f6;
  }

  .issue-type input[type="radio"]:checked::after {
    content: '';
    width: 6px;
    height: 6px;
    border-radius: 50%;
    background: white;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .issue-type input[type="radio"]:hover {
    box-shadow: 0 0 0 8px rgba(59, 130, 246, 0.1);
    border-color: #3b82f6;
  }

  .issue-type label {
    font-size: 14px;
    color: #374151;
    cursor: pointer;
    flex: 1;
    font-weight: 500;
  }

  /* Dynamic Sub-questions */
  .sub-questions {
    display: none;
    margin-top: 16px;
    padding: 16px;
    background: white;
    border-radius: 12px;
    border: 2px solid #e2e8f0;
  }

  .sub-questions.show {
    display: block;
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group:last-child {
    margin-bottom: 0;
  }

  .form-label {
    display: block;
    font-weight: 600;
    color: #374151;
    margin-bottom: 0.5rem;
    font-size: 1rem;
    text-transform: capitalize;
  }

  .form-label.required::after {
    content: " *";
    color: #dc2626;
    font-weight: bold;
    margin-left: 2px;
  }

  .form-input,
  .form-textarea,
  .form-select {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 12px;
    font-size: 1rem;
    color: #1e293b;
    background: #ffffff;
    transition: all 0.3s ease;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    box-sizing: border-box;
  }

  .form-input:focus,
  .form-textarea:focus,
  .form-select:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1), 0 4px 12px rgba(0, 0, 0, 0.1);
    transform: translateY(-1px);
  }

  .form-input::placeholder,
  .form-textarea::placeholder {
    color: #94a3b8;
    font-style: italic;
  }

  .form-textarea {
    resize: vertical;
    min-height: 120px;
    font-family: inherit;
  }

  .form-select {
    cursor: pointer;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
    background-position: right 0.75rem center;
    background-repeat: no-repeat;
    background-size: 1.5em 1.5em;
    padding-right: 2.5rem;
    appearance: none;
  }

  /* Error Messages */
  .error-message {
    display: none;
    color: #dc2626;
    font-size: 12px;
    margin-top: 4px;
  }

  .error-message.show {
    display: block;
  }

  .form-group.error .form-input,
  .form-group.error .form-textarea,
  .form-group.error .form-select {
    border-color: #dc2626;
  }

  /* Submit Button */
  .feedback-submit {
    width: 100%;
    background: linear-gradient(135deg, #2d3748 0%, #1a202c 100%);
    color: white;
    border: none;
    padding: 1rem 2rem;
    border-radius: 12px;
    font-size: 1.125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(45, 55, 72, 0.3);
    text-transform: capitalize;
    margin-top: 24px;
  }

  .feedback-submit:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 8px 20px rgba(45, 55, 72, 0.4);
    background: linear-gradient(135deg, #1a202c 0%, #171923 100%);
  }

  .feedback-submit:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .feedback-submit.loading {
    position: relative;
  }

  .feedback-submit.loading::after {
    content: "";
    position: absolute;
    width: 16px;
    height: 16px;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: #ffffff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    top: 0;
    left: 0;
    bottom: 0;
    right: 0;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  /* Success Message */
  .feedback-success {
    display: none;
    text-align: center;
    padding: 40px 24px;
  }

  .feedback-success.show {
    display: block;
  }

  .feedback-success-icon {
    width: 60px;
    height: 60px;
    margin: 0 auto 16px;
    background: #10b981;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .feedback-success-icon svg {
    width: 30px;
    height: 30px;
    fill: white;
  }

  .feedback-success-title {
    font-size: 18px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 8px;
  }

  .feedback-success-message {
    font-size: 14px;
    color: #6b7280;
    margin: 0 0 24px;
  }

  .feedback-success-close {
    padding: 8px 16px;
    background: #f3f4f6;
    color: #374151;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
  }

  .feedback-success-close:hover {
    background: #e5e7eb;
  }

  /* Mobile Responsive */
  @media (max-width: 640px) {
    .feedback-content {
      margin: 10px;
      max-width: none;
    }

    .feedback-header,
    .feedback-body {
      padding: 16px;
    }

    .rating-stars {
      justify-content: center;
    }

    .rating-star {
      width: 36px;
      height: 36px;
    }
  }
</style>

<!-- Feedback Button -->
<button class="feedback-button" id="feedbackBtn" aria-label="Open feedback form">
  <svg
    t="1750229384481"
    class="icon"
    viewBox="0 0 1024 1024"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    p-id="26690"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    width="200"
    height="200"
    aria-hidden="true"
  >
     <path d="M512 42.666667C252.8 42.666667 42.666667 252.8 42.666667 512c0 113.578667 40.362667 217.770667 107.52 298.922667L55.466667 981.333333H512c259.2 0 469.333333-210.133333 469.333333-469.333333S771.2 42.666667 512 42.666667zM355.541333 580.266667a170.709333 170.709333 0 0 0 312.96 0l17.066667-39.125334 78.208 34.176-17.066667 39.082667a256.042667 256.042667 0 0 1-469.376 0l-17.066666-39.082667 78.165333-34.133333 17.066667 39.082667z" p-id="26691" fill="#ffffff"></path>
    <circle cx="400" cy="400" r="40" fill="#000000" />
     <circle cx="624" cy="400" r="40" fill="#000000" />
  </svg>
</button>

<!-- Feedback Modal -->
<div class="feedback-modal" id="feedbackModal">
  <div class="feedback-content">
    <!-- Header -->
    <div class="feedback-header">
      <h2 class="feedback-title">Hepha.com Experience Feedback</h2>
      <p class="feedback-subtitle">Your feedback is important to us and helps improve our service quality</p>
      <button class="feedback-close" id="feedbackClose" aria-label="Close feedback form">&times;</button>
    </div>

    <!-- Form Container -->
    <div class="feedback-form-container" id="feedbackFormContainer">
      <div class="feedback-body">
        <!-- Shopify Contact Form -->
        <form action="{{ routes.root_url }}contact" method="post" id="feedbackForm" accept-charset="UTF-8" enctype="multipart/form-data">
          <input type="hidden" name="form_type" value="contact">
          <input type="hidden" name="utf8" value="✓">
          <input type="hidden" name="contact[name]" value="Website Feedback User">
          <input type="hidden" name="contact[email]" id="hiddenEmail">
          <input type="hidden" name="contact[body]" id="hiddenMessage">
          <input type="hidden" name="return_to" id="returnTo">

          <!-- Q1: Overall Experience Rating -->
          <div class="rating-section">
            <label class="rating-label">Q1: Please rate your overall experience on Hepha.com</label>
            <div class="rating-stars" id="ratingStars">
              <button type="button" class="rating-star" data-rating="1" aria-label="1 star">
                <svg viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
              <button type="button" class="rating-star" data-rating="2" aria-label="2 stars">
                <svg viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
              <button type="button" class="rating-star" data-rating="3" aria-label="3 stars">
                <svg viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
              <button type="button" class="rating-star" data-rating="4" aria-label="4 stars">
                <svg viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
              <button type="button" class="rating-star" data-rating="5" aria-label="5 stars">
                <svg viewBox="0 0 24 24">
                  <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                </svg>
              </button>
            </div>
            <div class="rating-labels">
              <span>Very Poor</span>
              <span>Poor</span>
              <span>Average</span>
              <span>Good</span>
              <span>Excellent</span>
            </div>
            <div class="error-message" id="ratingError">Please select your rating</div>
          </div>

          <!-- Q2: Problem Report Panel (Conditional) -->
          <div class="problem-report" id="problemReport">
            <h3 class="problem-title">Q2: Please tell us what problems you encountered</h3>
            
            <!-- Issue Type Selection -->
            <div class="issue-types" id="issueTypes">
              <div class="issue-type" data-issue="incomplete-product-info">
                <input type="radio" name="issue_type" value="incomplete-product-info" id="issue-incomplete-product-info">
                <label for="issue-incomplete-product-info">Incomplete or inaccurate product information</label>
              </div>
              <div class="issue-type" data-issue="live-chat-failed">
                <input type="radio" name="issue_type" value="live-chat-failed" id="issue-live-chat-failed">
                <label for="issue-live-chat-failed">Online customer service failure</label>
              </div>
              <div class="issue-type" data-issue="find-local-dealer">
                <input type="radio" name="issue_type" value="find-local-dealer" id="issue-find-local-dealer">
                <label for="issue-find-local-dealer">Dealer location information issues</label>
              </div>
              <div class="issue-type" data-issue="technical-bug">
                <input type="radio" name="issue_type" value="technical-bug" id="issue-technical-bug">
                <label for="issue-technical-bug">Website technical issues</label>
              </div>
              <div class="issue-type" data-issue="navigation-issues">
                <input type="radio" name="issue_type" value="navigation-issues" id="issue-navigation-issues">
                <label for="issue-navigation-issues">Website navigation or layout issues</label>
              </div>
            </div>
            <div class="error-message" id="issueTypeError">Please select an issue type</div>

            <!-- Dynamic Sub-questions -->
            <div class="sub-questions" id="subQuestions">
              <!-- Content will be dynamically loaded based on issue type -->
            </div>
          </div>

          <!-- Submit Button -->
          <button type="submit" class="feedback-submit" id="feedbackSubmit">Submit Feedback</button>
        </form>
      </div>
    </div>

    <!-- Success Message -->
    <div class="feedback-success" id="feedbackSuccess">
      <div class="feedback-success-icon">
        <svg viewBox="0 0 24 24">
          <path d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"/>
        </svg>
      </div>
      <h3 class="feedback-success-title">Feedback Submitted Successfully!</h3>
      <p class="feedback-success-message">Thank you for your valuable feedback. We will carefully review your suggestions.</p>
      <button class="feedback-success-close" id="feedbackSuccessClose">Close</button>
    </div>
  </div>
</div>

<script>
  const FeedbackModal = {
    // Initialize the feedback modal
    init() {
      this.modal = document.getElementById('feedbackModal');
      this.feedbackBtn = document.getElementById('feedbackBtn');
      this.closeBtn = document.getElementById('feedbackClose');
      this.form = document.getElementById('feedbackForm');
      this.formContainer = document.getElementById('feedbackFormContainer');
      this.successMessage = document.getElementById('feedbackSuccess');
      this.successCloseBtn = document.getElementById('feedbackSuccessClose');
      this.submitBtn = document.getElementById('feedbackSubmit');
      this.ratingStars = document.getElementById('ratingStars');
      this.problemReport = document.getElementById('problemReport');
      this.issueTypes = document.getElementById('issueTypes');
      this.subQuestions = document.getElementById('subQuestions');
      
      this.selectedRating = 0;
      this.selectedIssueType = '';
      
      this.bindEvents();
      this.checkSubmissionStatus();
    },

    // Bind event listeners
    bindEvents() {
      if (this.feedbackBtn) {
        this.feedbackBtn.addEventListener('click', () => this.open());
      }

      if (this.closeBtn) {
        this.closeBtn.addEventListener('click', () => this.close());
      }

      if (this.successCloseBtn) {
        this.successCloseBtn.addEventListener('click', () => this.close());
      }

      if (this.modal) {
        this.modal.addEventListener('click', (e) => {
          if (e.target === this.modal) {
            this.close();
          }
        });
      }

      if (this.form) {
        this.form.addEventListener('submit', (e) => this.handleSubmit(e));
      }

      // Rating stars
      if (this.ratingStars) {
        this.ratingStars.addEventListener('click', (e) => {
          if (e.target.closest('.rating-star')) {
            const rating = parseInt(e.target.closest('.rating-star').dataset.rating);
            this.selectRating(rating);
          }
        });
      }

      // Issue type selection
      if (this.issueTypes) {
        this.issueTypes.addEventListener('change', (e) => {
          if (e.target.name === 'issue_type') {
            this.selectIssueType(e.target.value);
          }
        });
      }
    },

    // Open modal
    open() {
      if (this.modal) {
        this.modal.classList.add('show');
        document.body.style.overflow = 'hidden';
        
        // Focus first interactive element
        setTimeout(() => {
          const firstStar = this.ratingStars?.querySelector('.rating-star');
          if (firstStar) {
            firstStar.focus();
          }
        }, 100);
      }
    },

    // Close modal
    close() {
      if (this.modal) {
        this.modal.classList.remove('show');
        document.body.style.overflow = '';
        this.resetForm();
      }
    },

    // Select rating
    selectRating(rating) {
      this.selectedRating = rating;
      this.clearError('ratingError');
      
      // Update star display
      const stars = this.ratingStars.querySelectorAll('.rating-star');
      stars.forEach((star, index) => {
        if (index < rating) {
          star.classList.add('selected');
        } else {
          star.classList.remove('selected');
        }
      });
      
      // Show/hide problem report based on rating
      if (rating <= 3) {
        this.problemReport.classList.add('show');
      } else {
        this.problemReport.classList.remove('show');
        this.selectedIssueType = '';
        this.subQuestions.classList.remove('show');
      }
    },

    // Select issue type
    selectIssueType(issueType) {
      this.selectedIssueType = issueType;
      this.clearError('issueTypeError');
      
      // Update issue type display
      const issueElements = this.issueTypes.querySelectorAll('.issue-type');
      issueElements.forEach(element => {
        if (element.dataset.issue === issueType) {
          element.classList.add('selected');
        } else {
          element.classList.remove('selected');
        }
      });
      
      // Load sub-questions
      this.loadSubQuestions(issueType);
    },

    // Load dynamic sub-questions based on issue type
    loadSubQuestions(issueType) {
      const subQuestionTemplates = {
        'incomplete-product-info': `
          <div class="form-group">
            <label class="form-label required">What specific information was missing?</label>
            <textarea class="form-textarea" name="missing_info" placeholder="Example: Weight in XL size, Compatibility with iOS 18" required></textarea>
            <div class="error-message" id="missingInfoError">Please describe the missing information</div>
          </div>
          <div class="form-group">
            <label class="form-label">Optional follow-up:</label>
            <input type="email" class="form-input" name="followup_email" placeholder="We may contact you for clarification (not marketing)">
          </div>
        `,
        'live-chat-failed': `
          <div class="form-group">
            <label class="form-label required">Describe your unresolved question (we'll respond within 24h):</label>
            <textarea class="form-textarea" name="unresolved_question" placeholder="Example: Payment failed but order deducted funds" required></textarea>
            <div class="error-message" id="unresolvedQuestionError">Please describe your unresolved question</div>
          </div>
          <div class="form-group">
            <label class="form-label required">Required contact:</label>
            <input type="email" class="form-input" name="contact_email" placeholder="Email for follow-up" required>
            <div class="error-message" id="contactEmailError">Please enter a valid email address</div>
          </div>
        `,
        'find-local-dealer': `
          <div class="form-group">
            <label class="form-label required">Describe your unresolved question (we'll respond within 24h):</label>
            <textarea class="form-textarea" name="dealer_question" placeholder="Describe your dealer-related question" required></textarea>
            <div class="error-message" id="dealerQuestionError">Please describe your question</div>
          </div>
          <div class="form-group">
            <label class="form-label required">Required contact:</label>
            <input type="email" class="form-input" name="dealer_email" placeholder="Email for follow-up" required>
            <div class="error-message" id="dealerEmailError">Please enter a valid email address</div>
          </div>
        `,
        'technical-bug': `
          <div class="form-group">
            <label class="form-label required">Describe your unresolved question (we'll respond within 24h):</label>
            <textarea class="form-textarea" name="technical_description" placeholder="Describe the technical issue" required></textarea>
            <div class="error-message" id="technicalDescriptionError">Please describe the technical issue</div>
          </div>
          <div class="form-group">
            <label class="form-label required">Required contact:</label>
            <input type="email" class="form-input" name="technical_email" placeholder="Email for follow-up" required>
            <div class="error-message" id="technicalEmailError">Please enter a valid email address</div>
          </div>
        `,
        'navigation-issues': `
          <div class="form-group">
            <label class="form-label required">Where did you face difficulties?</label>
            <textarea class="form-textarea" name="navigation_difficulties" placeholder="Example: Menu structure unclear on mobile" required></textarea>
            <div class="error-message" id="navigationDifficultiesError">Please describe where you faced difficulties</div>
          </div>
        `
      };
      
      if (subQuestionTemplates[issueType]) {
        this.subQuestions.innerHTML = subQuestionTemplates[issueType];
        this.subQuestions.classList.add('show');
      } else {
        this.subQuestions.classList.remove('show');
      }
    },

    // Handle form submission
    handleSubmit(e) {
      e.preventDefault();
      
      if (!this.validateForm()) {
        return;
      }
      
      this.setLoadingState(true);
      this.prepareFormData();
      
      // Submit the form
      setTimeout(() => {
        this.form.submit();
      }, 100);
    },

    // Validate form
    validateForm() {
      let isValid = true;
      
      // Clear all errors
      this.clearAllErrors();
      
      // Validate rating
      if (this.selectedRating === 0) {
        this.showError('ratingError');
        isValid = false;
      }
      
      // If rating <= 3, validate issue type and sub-questions
      if (this.selectedRating <= 3 && this.selectedRating > 0) {
        if (!this.selectedIssueType) {
          this.showError('issueTypeError');
          isValid = false;
        } else {
          // Validate sub-question required fields
          const requiredFields = this.subQuestions.querySelectorAll('[required]');
          requiredFields.forEach(field => {
            if (!field.value.trim()) {
              const errorId = field.name.replace('_', '') + 'Error';
              this.showError(errorId);
              field.closest('.form-group')?.classList.add('error');
              isValid = false;
            }
          });
          
          // Validate email format
          const emailFields = this.subQuestions.querySelectorAll('input[type="email"]');
          emailFields.forEach(field => {
            if (field.hasAttribute('required') && field.value && !this.isValidEmail(field.value)) {
              this.showError('emailError');
              field.closest('.form-group')?.classList.add('error');
              isValid = false;
            }
          });
        }
      }
      
      return isValid;
    },

    // Check if email is valid
    isValidEmail(email) {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    },

    // Prepare form data for Shopify submission
    prepareFormData() {
      const hiddenEmail = document.getElementById('hiddenEmail');
      const hiddenMessage = document.getElementById('hiddenMessage');
      const returnTo = document.getElementById('returnTo');
      
      // Get user email
      let userEmail = 'anonymous@hepha.com';
      const emailField = this.subQuestions.querySelector('input[name="user_email"]');
      if (emailField && emailField.value) {
        userEmail = emailField.value;
      }
      
      // Build comprehensive message
      let message = this.buildComprehensiveMessage();
      
      // Set hidden fields
      if (hiddenEmail) hiddenEmail.value = userEmail;
      if (hiddenMessage) hiddenMessage.value = message;
      if (returnTo) returnTo.value = window.location.pathname + '?contact_posted=true' + window.location.hash;
    },

    // Build comprehensive message for email
    buildComprehensiveMessage() {
      const timestamp = new Date().toLocaleString('en-US');
      const currentUrl = window.location.href;
      const ratingText = this.getRatingText(this.selectedRating);
      
      let message = `=== Hepha.com Experience Feedback ===\n\n`;
      message += `Submission Time: ${timestamp}\n`;
      message += `Page URL: ${currentUrl}\n\n`;
      
      message += `Q1: Overall Experience Rating\n`;
      message += `Rating: ${this.selectedRating}/5 (${ratingText})\n\n`;
      
      if (this.selectedRating <= 3 && this.selectedIssueType) {
        message += `Q2: Problem Report\n`;
        message += `Issue Type: ${this.getIssueTypeText(this.selectedIssueType)}\n\n`;
        
        // Add sub-question data
        const formData = new FormData();
        const inputs = this.subQuestions.querySelectorAll('input, textarea, select');
        inputs.forEach(input => {
          if (input.value) {
            const label = this.getFieldLabel(input.name);
            message += `${label}: ${input.value}\n`;
          }
        });
      }
      
      message += `\n---\nThis email was automatically sent by the Hepha.com feedback system`;
      
      return message;
    },

    // Get rating text
    getRatingText(rating) {
      const ratingTexts = {
        1: 'Very Poor',
        2: 'Poor', 
        3: 'Average',
        4: 'Good',
        5: 'Excellent'
      };
      return ratingTexts[rating] || 'Unknown';
    },

    // Get issue type text
    getIssueTypeText(issueType) {
      const issueTexts = {
        'incomplete-product-info': 'Incomplete or inaccurate product information',
        'live-chat-failed': 'Online customer service failure',
        'find-local-dealer': 'Dealer location information issues',
        'technical-bug': 'Website technical issues',
        'navigation-issues': 'Website navigation or layout issues'
      };
      return issueTexts[issueType] || 'Unknown issue type';
    },

    // Get field label
    getFieldLabel(fieldName) {
      const fieldLabels = {
        'missing_info': 'Missing Information Details',
        'followup_email': 'Follow-up Email',
        'unresolved_question': 'Unresolved Question',
        'contact_email': 'Contact Email',
        'dealer_question': 'Dealer Question',
        'dealer_email': 'Dealer Email',
        'technical_description': 'Technical Issue Description',
        'technical_email': 'Technical Email',
        'navigation_difficulties': 'Navigation Difficulties'
      };
      return fieldLabels[fieldName] || fieldName;
    },

    // Check submission status
    checkSubmissionStatus() {
      // Check URL parameters
      const urlParams = new URLSearchParams(window.location.search);
      if (urlParams.get('contact_posted') === 'true') {
        this.showSuccess();
        this.open();
        return;
      }
      
      // Check local storage
      if (localStorage.getItem('feedback_submitted') === 'true') {
        localStorage.removeItem('feedback_submitted');
        this.showSuccess();
        this.open();
        return;
      }
      
      // Check for Shopify success message
      const shopifySuccess = document.querySelector('.shopify-section--contact-form .form-success');
      if (shopifySuccess && shopifySuccess.style.display !== 'none') {
        this.showSuccess();
        this.open();
      }
    },

    // Show error message
    showError(errorId) {
      const errorElement = document.getElementById(errorId);
      if (errorElement) {
        errorElement.classList.add('show');
      }
    },

    // Clear error message
    clearError(errorId) {
      const errorElement = document.getElementById(errorId);
      if (errorElement) {
        errorElement.classList.remove('show');
      }
    },

    // Clear all error messages
    clearAllErrors() {
      const errorElements = document.querySelectorAll('.error-message.show');
      errorElements.forEach(element => {
        element.classList.remove('show');
      });
      
      const errorGroups = document.querySelectorAll('.form-group.error');
      errorGroups.forEach(group => {
        group.classList.remove('error');
      });
    },

    // Set loading state
    setLoadingState(isLoading) {
      if (this.submitBtn) {
        this.submitBtn.disabled = isLoading;
        
        if (isLoading) {
          this.submitBtn.classList.add('loading');
          this.submitBtn.textContent = 'Submitting...';
        } else {
          this.submitBtn.classList.remove('loading');
          this.submitBtn.textContent = 'Submit Feedback';
        }
      }
    },

    // Show success message
    showSuccess() {
      if (this.successMessage && this.formContainer) {
        this.successMessage.classList.add('show');
        this.formContainer.style.display = 'none';
        
        setTimeout(() => {
          const closeBtn = this.successMessage.querySelector('.feedback-success-close');
          if (closeBtn) {
            closeBtn.focus();
          }
        }, 100);
      }
    },

    // Reset form
    resetForm() {
      if (this.form) {
        this.form.reset();
        this.clearAllErrors();
      }
      
      this.selectedRating = 0;
      this.selectedIssueType = '';
      
      // Reset UI state
      const stars = this.ratingStars?.querySelectorAll('.rating-star');
      if (stars) {
        stars.forEach(star => star.classList.remove('selected'));
      }
      
      const issueElements = this.issueTypes?.querySelectorAll('.issue-type');
      if (issueElements) {
        issueElements.forEach(element => element.classList.remove('selected'));
      }
      
      if (this.problemReport) {
        this.problemReport.classList.remove('show');
      }
      
      if (this.subQuestions) {
        this.subQuestions.classList.remove('show');
        this.subQuestions.innerHTML = '';
      }
      
      if (this.successMessage && this.formContainer) {
        this.successMessage.classList.remove('show');
        this.formContainer.style.display = 'block';
      }
      
      this.setLoadingState(false);
    }
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => FeedbackModal.init());
  } else {
    FeedbackModal.init();
  }

  // Export to global scope
  window.FeedbackModal = FeedbackModal;
</script>