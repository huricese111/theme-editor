{% comment %} product-compare.liquid - Unified Product Comparison System {% endcomment %}

<style>
  /* Comparison Component Styles */
  .product-compare-widget {
    margin: 15px 0;
    z-index: 1;
    position: relative;
  }
  
  .compare-checkbox {
    display: flex;
    align-items: center;
    gap: 8px;
    cursor: pointer;
  }
  
  /* Bottom Comparison Bar */
  .compare-bar {
    position: fixed;
    bottom: 0;
    left: 0;
    width: 100%;
    background: #000;
    color: white;
    padding: 10px 20px;
    display: none;
    align-items: center;
    justify-content: space-between;
    z-index: 1000;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.3);
  }
  
  .compare-thumbs {
    display: flex;
    gap: 10px;
    overflow-x: auto;
    padding: 5px 0;
    flex-grow: 1;
  }
  
  .compare-thumb {
    position: relative;
    flex: 0 0 auto;
  }
  
  .compare-thumb img {
    width: 50px;
    height: 50px;
    border-radius: 4px;
    object-fit: cover;
    border: 2px solid white;
  }
  
  .remove-compare {
    position: absolute;
    top: -8px;
    right: -8px;
    background: red;
    color: white;
    border: none;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 14px;
    line-height: 1;
    cursor: pointer;
  }
  
  .compare-actions {
    display: flex;
    align-items: center;
    gap: 15px;
    margin-left: 20px;
  }
  
  .compare-count {
    background: #fff;
    color: #000;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-size: 12px;
    font-weight: bold;
  }
  
  .compare-btn {
    background: #fff;
    color: #000;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    font-weight: bold;
    cursor: pointer;
  }
  
  /* Comparison Modal */
  .compare-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.8);
    z-index: 1001;
    display: none;
    align-items: center;
    justify-content: center;
    padding: 20px;
    box-sizing: border-box;
  }
  
  .compare-modal.active {
    display: flex;
  }
  
  .compare-modal-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.5);
  }
  
  .compare-modal-container {
    position: relative;
    background: white;
    width: 100%;
    max-width: 1200px;
    max-height: 90vh;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 5px 30px rgba(0,0,0,0.3);
    display: flex;
    flex-direction: column;
    z-index: 2;
  }
  
  .compare-modal-header {
    padding: 15px 20px;
    border-bottom: 1px solid #eee;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .compare-modal-close {
    background: none;
    border: none;
    font-size: 24px;
    cursor: pointer;
  }
  
  .compare-table-container {
    overflow: auto;
    flex-grow: 1;
  }
  
  .compare-table {
    width: 100%;
    border-collapse: collapse;
    min-width: 800px;
  }
  
  .compare-table th, .compare-table td {
    padding: 12px 15px;
    text-align: left;
    border-bottom: 1px solid #eee;
  }
  
  .compare-table th {
    background: #f8f8f8;
    font-weight: bold;
    position: sticky;
    top: 0;
  }
  
  .spec-group-header td {
    background-color: #f0f0f0;
    font-weight: bold;
    padding: 10px 15px;
  }
  
  .compare-modal-footer {
    padding: 15px;
    text-align: right;
    border-top: 1px solid #eee;
  }
  
  /* Responsive Adjustments */
  @media (max-width: 768px) {
    .compare-bar {
      flex-direction: column;
      padding: 10px;
    }
    
    .compare-actions {
      margin-left: 0;
      margin-top: 10px;
      width: 100%;
      justify-content: center;
    }
    
    .compare-modal-container {
      max-height: 80vh;
    }
  }
</style>

<!-- Bottom Comparison Bar -->
<div class="compare-bar">
  <div class="compare-thumbs"></div>
  <div class="compare-actions">
    <span class="compare-count">0</span>
    <button class="compare-btn">Compare Products</button>
  </div>
</div>

<!-- Comparison Modal -->
<div class="compare-modal">
  <div class="compare-modal-overlay"></div>
  <div class="compare-modal-container">
    <div class="compare-modal-header">
      <h3>Product Comparison</h3>
      <button class="compare-modal-close">×</button>
    </div>
    <div class="compare-table-container">
      <table class="compare-table">
        <!-- Table will be generated dynamically by JavaScript -->
      </table>
    </div>
    <div class="compare-modal-footer">
      <button class="button clear-compare">Clear All</button>
    </div>
  </div>
</div>

<script>
(function() {
  // Ensure this code only runs once
  if (window.productCompareInitialized) return;
  window.productCompareInitialized = true;
  
  // Wait for DOM to be fully ready
  document.addEventListener('DOMContentLoaded', function() {
    const MAX_COMPARE_ITEMS = 4;
    const STORAGE_KEY = 'compareProducts';
    
    // Define specification modules
    const SPEC_MODULES = [
      { title: "E-Bike System", fields: ["frame", "motor", "battery", "display"] },
      { title: "Suspension", fields: ["fork", "shock"] },
      { title: "Shifting", fields: ["derailleur", "shifters", "sprocket", "cassette"] },
      { title: "Brakes", fields: ["brake_f_r", "brake_disc_f_r", "brake_levers"] },
      { title: "Wheels", fields: ["tires", "rims", "hub_front_f_r"] },
      { title: "Steering & Seating", fields: ["handlebar", "grips", "stem", "seat_post", "saddle"] },
      { title: "Components", fields: ["front_light", "rear_light", "carrier"] },
      { title: "Weight & Class", fields: ["perm_total_weight", "bike_weight", "category"] }
    ];
    
    // Friendly names for specification fields
    const FIELD_NAMES = {
      frame: "Frame",
      motor: "Motor",
      battery: "Battery",
      display: "Display",
      fork: "Fork",
      shock: "Shock",
      derailleur: "Derailleur",
      shifters: "Shifters",
      sprocket: "Sprocket",
      cassette: "Cassette",
      brake_f_r: "Brakes (F/R)",
      brake_disc_f_r: "Brake Discs (F/R)",
      brake_levers: "Brake Levers",
      tires: "Tires",
      rims: "Rims",
      hub_front_f_r: "Hubs (F/R)",
      handlebar: "Handlebar",
      grips: "Grips",
      stem: "Stem",
      seat_post: "Seat Post",
      saddle: "Saddle",
      front_light: "Front Light",
      rear_light: "Rear Light",
      carrier: "Carrier",
      perm_total_weight: "Perm. Total Weight",
      bike_weight: "Bike Weight",
      category: "Category"
    };
    
    // Initialize local storage
    function initStorage() {
      if (!localStorage.getItem(STORAGE_KEY)) {
        localStorage.setItem(STORAGE_KEY, JSON.stringify([]));
      }
    }
    
    // Get comparison list
    function getCompareList() {
      return JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
    }
    
    // Save comparison list
    function saveCompareList(list) {
      localStorage.setItem(STORAGE_KEY, JSON.stringify(list));
      updateCompareUI();
    }
    
    // Update UI state
    function updateCompareUI() {
      const compareList = getCompareList();
      const count = compareList.length;
      const compareBar = document.querySelector('.compare-bar');
      const compareThumbs = document.querySelector('.compare-thumbs');
      const compareCount = document.querySelector('.compare-count');
      
      // Update bottom bar
      if (compareCount) compareCount.textContent = count;
      if (compareThumbs) {
        compareThumbs.innerHTML = '';
        
        compareList.forEach(product => {
          const thumb = document.createElement('div');
          thumb.className = 'compare-thumb';
          thumb.innerHTML = `
            ${product.image ? `` : ''}
            <button class="remove-compare" data-handle="${product.handle}">×</button>
          `;
          compareThumbs.appendChild(thumb);
        });
      }
      
      // Show/hide bar
      if (compareBar) {
        compareBar.style.display = count > 0 ? 'flex' : 'none';
      }
      
      // Update checkbox states - FIXED: Only update specific checkboxes
      document.querySelectorAll('.compare-checkbox-input').forEach(checkbox => {
        const handle = checkbox.dataset.productHandle;
        const isInList = compareList.some(item => item.handle === handle);
        
        // Only update the checkbox if it exists
        if (checkbox) {
          checkbox.checked = isInList;
          checkbox.disabled = !isInList && count >= MAX_COMPARE_ITEMS;
        }
      });
    }
    
    // Render comparison table
    function renderCompareTable() {
      const compareList = getCompareList();
      const table = document.querySelector('.compare-table');
      
      if (!table) return;
      
      // Clear table
      table.innerHTML = '';
      
      // Add header row
      let headerRow = '<tr><th>Specification</th>';
      compareList.forEach(product => {
        headerRow += `<th>${product.title}</th>`;
      });
      headerRow += '</tr>';
      table.innerHTML = headerRow;
      
      // Add specification rows
      SPEC_MODULES.forEach(module => {
        // Add module title row
        let groupRow = `<tr class="spec-group-header"><td colspan="${compareList.length + 1}">${module.title}</td></tr>`;
        table.innerHTML += groupRow;
        
        // Add field rows
        module.fields.forEach(field => {
          let fieldRow = `<tr><td>${FIELD_NAMES[field] || field}</td>`;
          
          compareList.forEach(product => {
            const value = product.specs && product.specs[field] ? product.specs[field] : 'N/A';
            fieldRow += `<td>${value}</td>`;
          });
          
          fieldRow += '</tr>';
          table.innerHTML += fieldRow;
        });
      });
    }
    
    // Add product to comparison
    function addToCompare(product) {
      const compareList = getCompareList();
      
      // Check if already in list
      if (!compareList.some(item => item.handle === product.handle)) {
        if (compareList.length < MAX_COMPARE_ITEMS) {
          // Collect product specifications
          const specs = {};
          
          // Try to parse specs from data attribute
          if (product.specsData) {
            try {
              const parsedSpecs = typeof product.specsData === 'string' 
                ? JSON.parse(product.specsData) 
                : product.specsData;
              
              // Map specification fields
              SPEC_MODULES.forEach(module => {
                module.fields.forEach(field => {
                  if (parsedSpecs[field]) {
                    specs[field] = parsedSpecs[field];
                  } else {
                    // Try to find matching field
                    const fieldKeys = Object.keys(parsedSpecs);
                    const matchedKey = fieldKeys.find(key => 
                      key.toLowerCase() === field.toLowerCase() ||
                      key.replace(/_/g, '').toLowerCase() === field.replace(/_/g, '').toLowerCase()
                    );
                    
                    if (matchedKey) {
                      specs[field] = parsedSpecs[matchedKey];
                    } else {
                      specs[field] = 'N/A';
                    }
                  }
                });
              });
            } catch (e) {
              console.error('Error parsing product specs:', e);
            }
          }
          
          compareList.push({
            handle: product.handle,
            title: product.title,
            image: product.image,
            specs: specs
          });
          
          saveCompareList(compareList);
        } else {
          alert(`You can compare up to ${MAX_COMPARE_ITEMS} products`);
        }
      }
    }
    
    // Remove product from comparison
    function removeFromCompare(handle) {
      const compareList = getCompareList().filter(item => item.handle !== handle);
      saveCompareList(compareList);
      
      // Refresh table if modal is open
      if (document.querySelector('.compare-modal')?.classList.contains('active')) {
        renderCompareTable();
      }
    }
    
    // Clear comparison list
    function clearCompare() {
      saveCompareList([]);
      closeCompareModal();
    }
    
    // Open comparison modal
    function openCompareModal() {
      const compareList = getCompareList();
      
      // Only show if at least 2 products are selected
      if (compareList.length < 2) {
        alert('Please select at least 2 products to compare');
        return;
      }
      
      renderCompareTable();
      document.querySelector('.compare-modal').classList.add('active');
      document.body.style.overflow = 'hidden';
    }
    
    // Close comparison modal
    function closeCompareModal() {
      document.querySelector('.compare-modal').classList.remove('active');
      document.body.style.overflow = '';
    }
    
    // Event binding with fixed isolation
    function setupEventListeners() {
      // Use precise event delegation for checkboxes
      document.body.addEventListener('click', function(e) {
        // Check if clicked element is a compare checkbox
        if (e.target.classList.contains('compare-checkbox-input')) {
          // Prevent default to avoid multiple triggers
          e.preventDefault();
          
          // Get the specific checkbox element
          const checkbox = e.target;
          
          // Get product data directly from the checkbox
          const product = {
            handle: checkbox.dataset.productHandle,
            title: checkbox.dataset.productTitle,
            image: checkbox.dataset.productImage,
            specsData: checkbox.dataset.productSpecs ? 
              JSON.parse(checkbox.dataset.productSpecs) : {}
          };
          
          // Toggle based on current checked state
          if (checkbox.checked) {
            removeFromCompare(product.handle);
          } else {
            addToCompare(product);
          }
        }
        
        // Remove single product from comparison bar
        if (e.target.classList.contains('remove-compare')) {
          const handle = e.target.dataset.handle;
          removeFromCompare(handle);
        }
        
        // Compare button in bottom bar
        if (e.target.classList.contains('compare-btn')) {
          openCompareModal();
        }
        
        // Close modal
        if (e.target.classList.contains('compare-modal-close') || 
            e.target.classList.contains('compare-modal-overlay')) {
          closeCompareModal();
        }
        
        // Clear comparison
        if (e.target.classList.contains('clear-compare')) {
          clearCompare();
        }
      });
    }
    
    // Initialize
    function init() {
      initStorage();
      setupEventListeners();
      updateCompareUI();
    }
    
    // Start everything
    init();
  });
})();
</script>